"use strict";
self["webpackHotUpdate_freenow_react_polygon_editor"]("PolygonDraw-stories",{

/***/ "./src/PolygonDraw/PolygonDraw.tsx":
/*!*****************************************!*\
  !*** ./src/PolygonDraw/PolygonDraw.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PolygonDraw: () => (/* binding */ PolygonDraw)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers */ "./src/helpers.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ "./src/constants.ts");
/* harmony import */ var _Map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Map */ "./src/PolygonDraw/Map.tsx");
/* harmony import */ var _usePolygonEditor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./usePolygonEditor */ "./src/PolygonDraw/usePolygonEditor.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");






function PolygonDraw({
  polygon,
  activeIndex = 0,
  highlightedIndex,
  boundary,
  initialCenter,
  initialZoom,
  editable = true,
  drawable = true,
  onChange,
  onClick,
  onMouseEnter,
  onMouseLeave
}) {
  const {
    polygons,
    selection,
    addPoint,
    addPointToEdge,
    setPolygon,
    deselectAllPoints,
    removePointFromSelection,
    addPointsToSelection,
    selectPoints,
    moveSelectedPoints,
    deletePolygonPoints,
    selectAllPoints,
    isPolygonClosed,
    undo,
    redo
  } = (0,_usePolygonEditor__WEBPACK_IMPORTED_MODULE_4__.usePolygonEditor)(onChange, polygon, activeIndex);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Map__WEBPACK_IMPORTED_MODULE_3__["default"], {
    selection: selection,
    editable: editable,
    drawable: drawable,
    initialCenter: initialCenter ? (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.createLeafletLatLngTupleFromCoordinate)(initialCenter) : _constants__WEBPACK_IMPORTED_MODULE_2__.MAP.DEFAULT_CENTER,
    initialZoom: initialZoom || _constants__WEBPACK_IMPORTED_MODULE_2__.MAP.DEFAULT_ZOOM,
    boundaryPolygonCoordinates: boundary || _constants__WEBPACK_IMPORTED_MODULE_2__.MAP.WORLD_COORDINATES,
    activePolygonIndex: activeIndex,
    highlightedPolygonIndex: highlightedIndex,
    polygonCoordinates: polygons,
    setPolygon: setPolygon,
    addPoint: addPoint,
    setEdgeRestriction: this.setEdgeRestriction,
    addPointToEdge: addPointToEdge,
    deselectAllPoints: deselectAllPoints,
    removePointFromSelection: removePointFromSelection,
    addPointsToSelection: addPointsToSelection,
    selectPoints: selectPoints,
    moveSelectedPoints: moveSelectedPoints,
    deletePolygonPoints: deletePolygonPoints,
    selectAllPoints: selectAllPoints,
    isPolygonClosed: isPolygonClosed,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onUndo: undo,
    onRedo: redo
  });
}
PolygonDraw.displayName = "PolygonDraw";
try {
    // @ts-ignore
    PolygonDraw.displayName = "PolygonDraw";
    // @ts-ignore
    PolygonDraw.__docgenInfo = { "description": "", "displayName": "PolygonDraw", "props": { "boundary": { "defaultValue": null, "description": "", "name": "boundary", "required": false, "type": { "name": "Coordinate[]" } }, "initialCenter": { "defaultValue": null, "description": "", "name": "initialCenter", "required": false, "type": { "name": "Coordinate" } }, "initialZoom": { "defaultValue": null, "description": "", "name": "initialZoom", "required": false, "type": { "name": "number" } }, "editable": { "defaultValue": { value: "true" }, "description": "", "name": "editable", "required": false, "type": { "name": "boolean" } }, "drawable": { "defaultValue": { value: "true" }, "description": "", "name": "drawable", "required": false, "type": { "name": "boolean" } }, "onChange": { "defaultValue": null, "description": "", "name": "onChange", "required": false, "type": { "name": "((polygon: T, isValid: boolean) => void)" } }, "polygon": { "defaultValue": null, "description": "", "name": "polygon", "required": true, "type": { "name": "Coordinate[] | Coordinate[][]" } }, "activeIndex": { "defaultValue": { value: "0" }, "description": "", "name": "activeIndex", "required": false, "type": { "name": "number" } }, "highlightedIndex": { "defaultValue": null, "description": "", "name": "highlightedIndex", "required": false, "type": { "name": "number" } }, "setEdgeRestriction": { "defaultValue": null, "description": "", "name": "setEdgeRestriction", "required": true, "type": { "name": "(restriction: EdgeRestriction) => void" } }, "onClick": { "defaultValue": null, "description": "", "name": "onClick", "required": false, "type": { "name": "((index: number) => void)" } }, "onMouseEnter": { "defaultValue": null, "description": "", "name": "onMouseEnter", "required": false, "type": { "name": "((index: number) => void)" } }, "onMouseLeave": { "defaultValue": null, "description": "", "name": "onMouseLeave", "required": false, "type": { "name": "((index: number) => void)" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/PolygonDraw/PolygonDraw.tsx#PolygonDraw"] = { docgenInfo: PolygonDraw.__docgenInfo, name: "PolygonDraw", path: "src/PolygonDraw/PolygonDraw.tsx#PolygonDraw" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=PolygonDraw-stories.fc981bca74464bde0eac.hot-update.js.map