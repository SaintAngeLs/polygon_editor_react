"use strict";
self["webpackHotUpdate_freenow_react_polygon_editor"]("PolygonDraw-stories",{

/***/ "./stories/PolygonDraw.stories.tsx":
/*!*****************************************!*\
  !*** ./stories/PolygonDraw.stories.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   MultiplePolygons: () => (/* binding */ MultiplePolygons),
/* harmony export */   New: () => (/* binding */ New),
/* harmony export */   NotEditable: () => (/* binding */ NotEditable),
/* harmony export */   WithBoundary: () => (/* binding */ WithBoundary),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @storybook/addon-actions */ "./node_modules/@storybook/addon-actions/dist/index.mjs");
/* harmony import */ var _src_PolygonDraw_PolygonDraw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/PolygonDraw/PolygonDraw */ "./src/PolygonDraw/PolygonDraw.tsx");
/* harmony import */ var _polygons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polygons */ "./stories/polygons.ts");
/* harmony import */ var _StateContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StateContainer */ "./stories/StateContainer.tsx");
/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ "./node_modules/leaflet/dist/leaflet.css");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");








const SAMPLES = [_polygons__WEBPACK_IMPORTED_MODULE_3__.POLYGON_ONE, _polygons__WEBPACK_IMPORTED_MODULE_3__.POLYGON_TWO, _polygons__WEBPACK_IMPORTED_MODULE_3__.POLYGON_THREE];
const polygonChangeAction = (0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_1__.action)('polygon changed');
const polygonClickedAction = (0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_1__.action)('polygon clicked');
const polygonMouseEnterAction = (0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_1__.action)('polygon mouseenter');
const polygonMouseLeaveAction = (0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_1__.action)('polygon mouseleave');
const meta = {
  title: 'PolygonDraw',
  decorators: [Story => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("div", {
    style: {
      height: '100vh',
      background: 'red'
    },
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story, {})
  })]
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const Default = () => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_StateContainer__WEBPACK_IMPORTED_MODULE_4__.StateContainer, {
  initialState: {
    polygon: _polygons__WEBPACK_IMPORTED_MODULE_3__.POLYGON
  },
  children: (state, setState) => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment, {
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_src_PolygonDraw_PolygonDraw__WEBPACK_IMPORTED_MODULE_2__.PolygonDraw, {
      polygon: state.polygon,
      onChange: (polygon, isValid) => {
        setState({
          polygon: polygon
        });
        polygonChangeAction(polygon, isValid);
      }
    })
  })
});
Default.displayName = "Default";
const MultiplePolygons = () => {
  const [activeIndex, setActiveIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [highlightedIndex, setHighlightedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
  const [polygons, setPolygons] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(SAMPLES);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_src_PolygonDraw_PolygonDraw__WEBPACK_IMPORTED_MODULE_2__.PolygonDraw, {
    polygon: polygons,
    activeIndex: activeIndex,
    highlightedIndex: highlightedIndex,
    onClick: setActiveIndex,
    onChange: newPolygons => setPolygons(newPolygons),
    onMouseEnter: index => setHighlightedIndex(index),
    onMouseLeave: index => setHighlightedIndex(oldIndex => oldIndex === index ? undefined : oldIndex)
  });
};
MultiplePolygons.displayName = "MultiplePolygons";
// export const AutomaticReplace = {
//     render: () => {
//         const [index, setIndex] = useState(0);

//         useEffect(() => {
//             const id = setInterval(() => {
//                 setIndex((oldIndex) => {
//                     return (oldIndex + 1) % SAMPLES.length;
//                 });
//             }, 1000);
//             return () => clearInterval(id);
//         }, []);

//         return (
//             <PolygonDraw
//                 polygon={SAMPLES[index]}
//                 activeIndex={0}
//                 editable={false}
//                 onClick={(i) => polygonClickedAction(i)}
//                 onChange={(i) => polygonChangeAction(i)}
//                 onMouseEnter={(i) => polygonMouseEnterAction(i)}
//                 onMouseLeave={(i) => polygonMouseLeaveAction(i)}
//             />
//         );
//     },

//     name: 'Automatic replace',
// };

const New = () => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_StateContainer__WEBPACK_IMPORTED_MODULE_4__.StateContainer, {
  initialState: {
    polygon: []
  },
  children: (state, setState) => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_src_PolygonDraw_PolygonDraw__WEBPACK_IMPORTED_MODULE_2__.PolygonDraw, {
    polygon: state.polygon,
    onChange: (polygon, isValid) => {
      setState({
        polygon
      });
      polygonChangeAction(polygon, isValid);
    }
  })
});
New.displayName = "New";
const NotEditable = () => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_src_PolygonDraw_PolygonDraw__WEBPACK_IMPORTED_MODULE_2__.PolygonDraw, {
  editable: false,
  polygon: _polygons__WEBPACK_IMPORTED_MODULE_3__.POLYGON,
  boundary: _polygons__WEBPACK_IMPORTED_MODULE_3__.BOUNDARY
});
NotEditable.displayName = "NotEditable";
// export const Highlighted = () => (
//     <PolygonDraw editable={false} highlightedIndex={2} polygon={SAMPLES} boundary={BOUNDARY} />
// );

const WithBoundary = () => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_StateContainer__WEBPACK_IMPORTED_MODULE_4__.StateContainer, {
  initialState: {
    polygon: _polygons__WEBPACK_IMPORTED_MODULE_3__.POLYGON
  },
  children: (state, setState) => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_src_PolygonDraw_PolygonDraw__WEBPACK_IMPORTED_MODULE_2__.PolygonDraw, {
    polygon: state.polygon,
    boundary: _polygons__WEBPACK_IMPORTED_MODULE_3__.BOUNDARY,
    onChange: (polygon, isValid) => {
      setState({
        polygon
      });
      polygonChangeAction(polygon, isValid);
    }
  })
});
WithBoundary.displayName = "WithBoundary";
// export const WithInitialCenter = {
//     render: () => (
//         <PolygonDraw editable={false} polygon={[]} initialCenter={{ longitude: 2.1734, latitude: 41.3851 }} />
//     ),

//     name: 'With initial center',
// };

// export const WithInitialZoom = {
//     render: () => <PolygonDraw editable={false} polygon={[]} initialZoom={6} />,
//     name: 'With initial zoom',
// };
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "() => <StateContainer initialState={{\n  polygon: POLYGON\n}}>\n        {(state, setState) => <>\n            \n            <PolygonDraw polygon={state.polygon} onChange={(polygon, isValid) => {\n      setState({\n        polygon: polygon\n      });\n      polygonChangeAction(polygon, isValid);\n    }} />\n        </>}\n    </StateContainer>",
      ...Default.parameters?.docs?.source
    }
  }
};
MultiplePolygons.parameters = {
  ...MultiplePolygons.parameters,
  docs: {
    ...MultiplePolygons.parameters?.docs,
    source: {
      originalSource: "() => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [highlightedIndex, setHighlightedIndex] = useState<number | undefined>(undefined);\n  const [polygons, setPolygons] = useState(SAMPLES);\n  return <PolygonDraw polygon={polygons} activeIndex={activeIndex} highlightedIndex={highlightedIndex} onClick={setActiveIndex} onChange={newPolygons => setPolygons(newPolygons)} onMouseEnter={index => setHighlightedIndex(index)} onMouseLeave={index => setHighlightedIndex(oldIndex => oldIndex === index ? undefined : oldIndex)} />;\n}",
      ...MultiplePolygons.parameters?.docs?.source
    }
  }
};
New.parameters = {
  ...New.parameters,
  docs: {
    ...New.parameters?.docs,
    source: {
      originalSource: "() => <StateContainer initialState={{\n  polygon: ([] as Coordinate[])\n}}>\n        {(state, setState) => <PolygonDraw polygon={state.polygon} onChange={(polygon, isValid) => {\n    setState({\n      polygon\n    });\n    polygonChangeAction(polygon, isValid);\n  }} />}\n    </StateContainer>",
      ...New.parameters?.docs?.source
    }
  }
};
NotEditable.parameters = {
  ...NotEditable.parameters,
  docs: {
    ...NotEditable.parameters?.docs,
    source: {
      originalSource: "() => <PolygonDraw editable={false} polygon={POLYGON} boundary={BOUNDARY} />",
      ...NotEditable.parameters?.docs?.source
    }
  }
};
WithBoundary.parameters = {
  ...WithBoundary.parameters,
  docs: {
    ...WithBoundary.parameters?.docs,
    source: {
      originalSource: "() => <StateContainer initialState={{\n  polygon: POLYGON\n}}>\n        {(state, setState) => <PolygonDraw polygon={state.polygon} boundary={BOUNDARY} onChange={(polygon, isValid) => {\n    setState({\n      polygon\n    });\n    polygonChangeAction(polygon, isValid);\n  }} />}\n    </StateContainer>",
      ...WithBoundary.parameters?.docs?.source
    }
  }
};
const __namedExportsOrder = ["Default", "MultiplePolygons", "New", "NotEditable", "WithBoundary"];

/***/ })

});