{"version":3,"file":"PolygonDraw-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAlFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAvDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAGA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAGA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAGA;AACA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAxDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AAIA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAgrBA;AA6rBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5xBA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAGA;AAEA;AACA;AACA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AA/DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAnFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnDA;AAEA;AAiBA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACrLA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzHA;AAEA;;;;;;;;;;;;;;;ACCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;ACxBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAEA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAEA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AAEA;AACA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AAEA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;;;;;;;ACDA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjxEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAGA;AA5CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AAEA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AA3CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACTA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACfA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACFA;AAIA;AAWA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAIA;AAKA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;ACxJA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;AC9KA;;;;;;;;;;ACAA","sources":["webpack://@freenow/react-polygon-editor/./src/ActionBar/ActionBar.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/ActionButton.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/EdgeConstraintsBar.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/AddVertex.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/DrawMode.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/Export.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/Frame.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/IconForHorizontal.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/IconForVertical.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/Import.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/Trashbin.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/VectorMode.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/BoundaryPolygon.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/EdgeVertex.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/Map.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/MapInner.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/Polygon.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/PolygonDraw.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/PolygonVertex.tsx","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/actions.ts","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/reducer.ts","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/usePolygonEditor.ts","webpack://@freenow/react-polygon-editor/./src/PolygonDraw/validators.ts","webpack://@freenow/react-polygon-editor/./src/actionUtils.ts","webpack://@freenow/react-polygon-editor/./src/common/colors.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/Button.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/ButtonGroup.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/CheckCircleSolidIcon.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/ChevronDownIcon.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/CloseCircleSolidIcon.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/CloseIcon.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/Headline.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/InfoCircleSolidIcon.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/Modal.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/Select.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/Text.tsx","webpack://@freenow/react-polygon-editor/./src/common/components/Textarea.tsx","webpack://@freenow/react-polygon-editor/./src/common/helpers/prettyPrint.ts","webpack://@freenow/react-polygon-editor/./src/constants.ts","webpack://@freenow/react-polygon-editor/./src/conversion/ExportPolygonForm.tsx","webpack://@freenow/react-polygon-editor/./src/conversion/ImportPolygonForm.tsx","webpack://@freenow/react-polygon-editor/./src/conversion/ImportPolygonStatus.tsx","webpack://@freenow/react-polygon-editor/./src/conversion/format/geojson.ts","webpack://@freenow/react-polygon-editor/./src/conversion/format/index.ts","webpack://@freenow/react-polygon-editor/./src/conversion/format/jts.ts","webpack://@freenow/react-polygon-editor/./src/conversion/format/latlng.ts","webpack://@freenow/react-polygon-editor/./src/conversion/format/types.ts","webpack://@freenow/react-polygon-editor/./src/conversion/useDeserialize.tsx","webpack://@freenow/react-polygon-editor/./src/helpers.ts","webpack://@freenow/react-polygon-editor/./src/leaflet/Map.tsx","webpack://@freenow/react-polygon-editor/./stories/StateContainer.tsx","webpack://@freenow/react-polygon-editor/./stories/polygons.ts","webpack://@freenow/react-polygon-editor/ignored|/home/kaliuser/Documents/portfolio/commercial_apps/polygon_editor/react-polygon-editor/node_modules/jsonlint-lines/lib|fs","webpack://@freenow/react-polygon-editor/ignored|/home/kaliuser/Documents/portfolio/commercial_apps/polygon_editor/react-polygon-editor/node_modules/jsonlint-lines/lib|path"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\n\nimport { FREEDOM_RED_900 } from '../common/colors';\n\nimport { ActionButton, ActionButtonIcons } from './ActionButton';\nimport { LABELS } from '../constants';\n\nconst Container = styled.div`\n    position: absolute;\n    right: 0;\n    bottom: 24px;\n    display: flex;\n\n    padding-right: 8px;\n    padding-left: 8px;\n\n    > * {\n        margin-left: 8px;\n    }\n`;\n\nexport interface Props {\n    editable: boolean;\n\n    drawable: boolean;\n\n    onFocus: () => void;\n\n    onEnableDrawMode: (enabled?: boolean) => void;\n    isVectorModeEnabled: boolean;\n\n    onEnableVectorMode: (enabled?: boolean) => void;\n    isDrawModeEnabled: boolean;\n\n    onAddVertex: () => void;\n\n    onDelete: () => void;\n    deleteInactive: boolean;\n\n    onExport: () => void;\n    onImport: () => void;\n}\n\nexport const ActionBar: FunctionComponent<Props> = ({\n    editable,\n    drawable,\n    deleteInactive,\n    isVectorModeEnabled,\n    onEnableVectorMode,\n    onEnableDrawMode,\n    isDrawModeEnabled,\n    onAddVertex,\n    onFocus,\n    onDelete,\n    onExport,\n    onImport,\n}) => (\n    <Container>\n        {editable && (\n            <>\n                <ActionButton\n                     onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n                        e.stopPropagation();\n                        //if (!isVectorModeEnabled) {\n                            onEnableVectorMode(true);\n                            //onEnableDrawMode(false);\n                        //}\n                    }}\n                    icon={ActionButtonIcons.VECTOR_MODE}\n                    inactive={!isVectorModeEnabled}\n                    aria-label={`${isVectorModeEnabled ? 'Disable Editing' : 'Enable Editing'}`}\n                >\n                    {LABELS.PEN}\n                </ActionButton>\n                <ActionButton\n                    onClick={onDelete}\n                    icon={ActionButtonIcons.TRASHCAN}\n                    activeIconColor={FREEDOM_RED_900}\n                    disabled={deleteInactive}\n                    inactive={deleteInactive}\n                    aria-label=\"Delete\"\n                >\n                    {LABELS.DELETE}\n                </ActionButton>\n            </>\n        )}\n        {drawable && (\n            <>\n                <ActionButton\n                    onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n                        e.stopPropagation();\n                        //if (!isDrawModeEnabled) {\n                            onEnableDrawMode(true);\n                            //onEnableVectorMode(false);\n                        //}\n                    }}\n                    icon={ActionButtonIcons.DRAW_MODE}\n                    inactive={!isDrawModeEnabled}\n                    aria-label={`${isDrawModeEnabled ? 'Disable Drawing' : 'Enable Drawing'}`}\n                >\n                    {LABELS.DRAW}\n                </ActionButton>\n                <ActionButton\n                    onClick={onDelete}\n                    icon={ActionButtonIcons.TRASHCAN}\n                    activeIconColor={FREEDOM_RED_900}\n                    disabled={deleteInactive}\n                    inactive={deleteInactive}\n                    aria-label=\"Delete\"\n                >\n                    {LABELS.DELETE}\n                </ActionButton>\n            </>\n        )}\n        <ActionButton onClick={onAddVertex} icon={ActionButtonIcons.ADD_VERTEX}>\n            {LABELS.ADD_VERTEX}\n        </ActionButton>\n        <ActionButton onClick={onImport} icon={ActionButtonIcons.IMPORT}>\n            {LABELS.IMPORT}\n        </ActionButton>\n        <ActionButton onClick={onExport} icon={ActionButtonIcons.EXPORT}>\n            {LABELS.EXPORT}\n        </ActionButton>\n        <ActionButton onClick={onFocus} icon={ActionButtonIcons.FRAME}>\n            {LABELS.FOCUS}\n        </ActionButton>\n    </Container>\n);\n","import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\n\nimport { AUTHENTIC_BLUE_900, AUTHENTIC_BLUE_200, ACTION_BLUE_900, WHITE } from '../common/colors';\n\nimport { Frame } from './Icons/Frame';\nimport { Trashbin } from './Icons/Trashbin';\nimport { VectorMode } from './Icons/VectorMode';\nimport { Export } from './Icons/Export';\nimport { Import } from './Icons/Import';\nimport { DrawMode } from './Icons/DrawMode';\nimport { AddVertex } from './Icons/AddVertex';\n\nexport enum ActionButtonIcons {\n    TRASHCAN = 'TRASHCAN',\n    FRAME = 'FRAME',\n    VECTOR_MODE = 'VECTOR_MODE',\n    ADD_VERTEX = 'ADD_VERTEX',\n    DRAW_MODE = 'DRAW_MODE',\n    EXPORT = 'EXPORT',\n    IMPORT = 'IMPORT',\n}\n\ninterface ContainerProps {\n    disabled?: boolean;\n}\nconst Container = styled('div')<ContainerProps>`\n    position: relative;\n    width: 42px;\n    height: 42px;\n\n    padding-top: 6px;\n    border-radius: 4px;\n\n    text-align: center;\n    font-size: 10px;\n    font-weight: 600;\n    color: ${AUTHENTIC_BLUE_900};\n    background-color: ${WHITE};\n    border: solid ${AUTHENTIC_BLUE_200} 1px;\n\n    box-shadow: inherit;\n    transition: 0.2s;\n\n    user-select: none;\n    cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n\n    &:hover {\n        transform: scale(1.005);\n        box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.16);\n        z-index: 1;\n    }\n`;\n\nconst renderIcon = (icon: ActionButtonIcons, inactive?: boolean, activeIconColor = ACTION_BLUE_900) => {\n    const props = {\n        iconColor: inactive ? AUTHENTIC_BLUE_200 : activeIconColor,\n        width: 16,\n        height: 16,\n    };\n\n    switch (icon) {\n        case ActionButtonIcons.TRASHCAN:\n            return <Trashbin {...props} />;\n        case ActionButtonIcons.FRAME:\n            return <Frame {...props} />;\n        case ActionButtonIcons.VECTOR_MODE:\n            return <VectorMode {...props} />;\n        case ActionButtonIcons.ADD_VERTEX:\n            return <AddVertex {...props} />;\n        case ActionButtonIcons.DRAW_MODE:\n            return <DrawMode {...props} />;\n        case ActionButtonIcons.EXPORT:\n            return <Export {...props} />;\n        case ActionButtonIcons.IMPORT:\n            return <Import {...props} />;\n        default:\n            return null;\n    }\n};\n\nexport interface Props {\n    icon: ActionButtonIcons;\n    onClick: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n\n    inactive?: boolean;\n    disabled?: boolean;\n    activeIconColor?: string;\n    className?: string;\n    children: React.ReactNode;\n}\nexport const ActionButton: FunctionComponent<Props> = ({ icon, children, inactive, activeIconColor, ...props }) => {\n    return (\n        <Container {...props}>\n            <div>{renderIcon(icon, inactive, activeIconColor)}</div>\n            {children}\n        </Container>\n    );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    position: absolute;\n    background-color: #fff;\n    right: 0;\n    top: 64px;  \n    border-radius: 5px;\n    padding-right: 8px;\n    display: block;\n    margin-right: 8px;\n    padding-left: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n    > * {\n        margin-left: 8px;\n    }\n`;\n\nconst Title = styled.div`\n    font-size: 1.2em;\n    color: #333;\n    font-weight: 600;\n    border-bottom: 2px solid #ddd;\n    padding-bottom: 10px;\n    margin-bottom: 10px;\n`;\n\n\nconst RadioButtonLabel = styled.label`\n    display: flex;\n    align-items: center;\n    margin-right: 10px;\n\n    input {\n        margin-right: 10px;\n    }\n`;\n\nexport interface EdgeConstraintsBarProps {\n    onSetHorizontal: (value: boolean) => void;\n    onSetVertical: (value: boolean) => void;\n}\n\nexport const EdgeConstraintsBar: FunctionComponent<EdgeConstraintsBarProps> = ({ onSetHorizontal, onSetVertical }) => {\n    const [selectedEdge, setSelectedEdge] = useState<string | null>(null);\n\n    const handleEdgeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\n        const edge = e.target.value;\n        setSelectedEdge(edge);\n\n        if (edge === 'none') {\n            onSetHorizontal(false);\n            onSetVertical(false);\n        } else if (edge === 'horizontal') {\n            onSetHorizontal(true);\n            onSetVertical(false);\n        } else if (edge === 'vertical') {\n            onSetHorizontal(false);\n            onSetVertical(true);\n        }\n    }\n\n    return (\n        <Container>\n            <Title> Restrictions </Title>\n            <RadioButtonLabel>\n                <input \n                    type=\"radio\" \n                    value=\"none\"\n                    checked={selectedEdge === 'none'} \n                    onChange={handleEdgeChange}\n                    name=\"edgeDirection\"\n                />\n                None\n            </RadioButtonLabel>\n            <RadioButtonLabel>\n                <input \n                    type=\"radio\" \n                    value=\"horizontal\"\n                    checked={selectedEdge === 'horizontal'} \n                    onChange={handleEdgeChange}\n                    name=\"edgeDirection\"\n                />\n                Horizontal Edge\n            </RadioButtonLabel>\n            <RadioButtonLabel>\n                <input \n                    type=\"radio\" \n                    value=\"vertical\"\n                    checked={selectedEdge === 'vertical'} \n                    onChange={handleEdgeChange}\n                    name=\"edgeDirection\"\n                />\n                Vertical Edge\n            </RadioButtonLabel>\n        </Container>\n    );\n}","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const AddVertex: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" width={16} height={16}>\n        <path \n        stroke-linecap=\"round\" \n        stroke-linejoin=\"round\" \n        d=\"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const DrawMode: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n        <path fill={iconColor} stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9.53 16.122a3 3 0 00-5.78 1.128 2.25 2.25 0 01-2.4 2.245 4.5 4.5 0 008.4-2.245c0-.399-.078-.78-.22-1.128zm0 0a15.998 15.998 0 003.388-1.62m-5.043-.025a15.994 15.994 0 011.622-3.395m3.42 3.42a15.995 15.995 0 004.764-4.648l3.876-5.814a1.151 1.151 0 00-1.597-1.597L14.146 6.32a15.996 15.996 0 00-4.649 4.763m3.42 3.42a6.776 6.776 0 00-3.42-3.42\" />\n    </svg>\n);\n","import React, { SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const Export: React.FC<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n        <path\n            d=\"M19 19v2H5v-2h14zM13 3v10.436l5-4.445v2.676L12 17l-6-5.333V8.991l5 4.445V3h2z\"\n            fill={iconColor}\n            fillRule=\"nonzero\"\n        />\n    </svg>\n);\n\n","import React, { FunctionComponent, SVGProps } from 'react';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const Frame: FunctionComponent<Props> = ({ iconColor, ...props }) => (\n    <svg width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n        <path\n            fill={iconColor}\n            d=\"M0 8V4a4 4 0 0 1 4-4h4v2H4a2 2 0 0 0-2 2v4H0zm0 8h2v4c0 1.1.9 2 2 2h4v2H4a4 4 0 0 1-4-4v-4zm24-8h-2V4a2 2 0 0 0-2-2h-4V0h4a4 4 0 0 1 4 4v4zm0 8v4a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2v-4h2z\"\n            \n            fillRule=\"nonzero\"\n        />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const IconForHorizontal: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" width={16} height={16}>\n        <path d=\"M21.883 12l-7.527 6.235.644.765 9-7.521-9-7.479-.645.764 7.529 6.236h-21.884v1h21.883z\"/>\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const IconForVertical: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" width={16} height={16}>\n        <path d=\"M11 2.206l-6.235 7.528-.765-.645 7.521-9 7.479 9-.764.646-6.236-7.53v21.884h-1v-21.883z\"/>\n    </svg>\n);\n","import React, { SVGProps } from 'react';\n\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\n\nexport const Import: React.FC<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n        <path\n            d=\"M19 19v2H5v-2h14zM12 3l6 5.333v2.675l-5-4.444V17h-2V6.564l-5 4.445V8.334L12 3z\"\n            fill={iconColor}\n            fillRule=\"nonzero\"\n        />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const Trashbin: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }) => (\n    <svg width={24} height={24} viewBox=\"4 4 19 19\" {...props}>\n        <path\n            fill={iconColor}\n            d=\"M8.8 19.4c0 .9.6 1.6 1.4 1.6h6c.7 0 1.4-.7 1.4-1.6V10H8.8v9.4zm9.9-12.7h-2.8l-.8-1h-3.9l-.8 1H7.7V9h11V6.7z\"\n        />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const VectorMode: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n        <path\n            fill={iconColor}\n            d=\"M15 13.2v7.4l-14.3 3 3-14.3H11l3.9 3.9zm-9.4-1.6l-2 9 9-1.9v-7.1h-7zm13.8 3a3.5 3.5 0 0 1-5 0l-4.8-5a3.5 3.5 0 0 1 0-4.8l4-4.1 9.8 9.8-4 4zm-11.5 0a1.2 1.2 0 1 1 1.7 1.6 1.2 1.2 0 0 1-1.7-1.6z\"\n        />\n    </svg>\n);\n","import React, { FunctionComponent } from 'react';\nimport { Polygon as LeafletPolygon } from 'react-leaflet';\n\nimport { Coordinate } from 'types';\nimport { createLeafletLatLngFromCoordinate } from '../helpers';\nimport { MAP } from '../constants';\n\ninterface Props {\n    coordinates: Coordinate[];\n    hasError: boolean;\n}\n\nexport const BoundaryPolygon: FunctionComponent<Props> = ({ coordinates, hasError }) => (\n    <LeafletPolygon\n        positions={[MAP.WORLD_LAT_LNG_COORDINATES, coordinates.map(createLeafletLatLngFromCoordinate)]}\n        fillColor={MAP.BOUNDARY_COLOR}\n        color={hasError ? MAP.ERROR_BOUNDARY_COLOR : MAP.BOUNDARY_COLOR}\n        weight={hasError ? MAP.BORDER_WIDTH : 0.4}\n        interactive={false}\n    />\n);\n","import React from 'react';\nimport { CircleMarker as LeafletCircleMarker } from 'react-leaflet';\n\nimport { Coordinate } from 'types';\nimport { createLeafletLatLngFromCoordinate } from '../helpers';\nimport { MAP } from '../constants';\nimport { EdgeRestriction } from './Map';\n\ninterface Props {\n    coordinate: Coordinate;\n    index: number;\n    onClick: (coordinate: Coordinate, index: number) => void;\n    edgeRestriction: EdgeRestriction;\n    children?: React.ReactNode;\n}\n\ninterface State {\n    isHoverActive: boolean;\n}\n\nexport class EdgeVertex extends React.Component<Props, State> {\n    state = {\n        isHoverActive: false,\n    };\n\n    handleMouseOver = () => this.setState({ isHoverActive: true });\n    handleMouseOut = () => this.setState({ isHoverActive: false });\n    handleClick = () => this.props.onClick(this.props.coordinate, this.props.index);\n\n\n    renderIcon = () => {\n        const { edgeRestriction } = this.props;\n\n        switch (edgeRestriction) {\n            case 'horizontal':\n                return (\n                    <div className=\"edge-icon\">\n                        <i className=\"fa fa-arrows-h\" aria-hidden=\"true\"></i>\n                    </div>\n                );\n            case 'vertical':\n                return (\n                    <div className=\"edge-icon\">\n                        <i className=\"fa fa-arrows-v\" aria-hidden=\"true\"></i>\n                    </div>\n                );\n            default:\n                return null; // No icon for 'none' or null restriction\n        }\n    };\n\n    render() {\n        const { isHoverActive } = this.state;\n        const { coordinate } = this.props;\n\n        return (\n            <div className=\"edge-vertex\">\n                {this.renderIcon()}\n                <LeafletCircleMarker\n                    \n                    fillColor={MAP.VERTEX_FILL_COLOR}\n                    fillOpacity={isHoverActive ? 1 : 0.8}\n                    color={MAP.POLYGON_ACTIVE_COLOR}\n                    opacity={isHoverActive ? 1 : 0.8}\n                    weight={isHoverActive ? 2 : 0.5}\n                    radius={isHoverActive ? 6 : 3}\n                    center={createLeafletLatLngFromCoordinate(coordinate)}\n                    eventHandlers={{\n                        click: this.handleClick,\n                        mouseover: this.handleMouseOver,\n                        mouseout: this.handleMouseOut,\n                    }}\n                />\n            </div>\n        );\n    }\n}\n","import React, { memo } from 'react';\nimport { LatLng, latLngBounds, LatLngBounds, LatLngTuple, LeafletMouseEvent } from 'leaflet';\nimport { useMap, Pane, Polyline, Rectangle } from 'react-leaflet';\nimport flatten from 'lodash.flatten';\n\nimport { Coordinate } from 'types';\n\nimport {\n    createCoordinateFromLeafletLatLng,\n    createLeafletLatLngBoundsFromCoordinates,\n    createLeafletLatLngFromCoordinate,\n    addCoordinates,\n    subtractCoordinates,\n    getPolygonEdges,\n    isCoordinateInPolygon,\n    isPolygonClosed,\n    getMidPoint,\n} from '../helpers';\nimport { Modal } from '../common/components/Modal';\nimport { ExportPolygonForm } from '../conversion/ExportPolygonForm';\nimport { ImportPolygonForm } from '../conversion/ImportPolygonForm';\n//import { TileLayer } from '../leaflet/TileLayer';\nimport { MAP } from '../constants';\nimport { Map, Container } from '../leaflet/Map';\nimport { ActionBar } from '../ActionBar/ActionBar';\nimport { EdgeVertex } from './EdgeVertex';\nimport { PolygonVertex } from './PolygonVertex';\nimport { BoundaryPolygon } from './BoundaryPolygon';\nimport { Polygon } from './Polygon';\nimport MapInner from './MapInner';\nimport { EdgeConstraintsBar } from '../ActionBar/EdgeConstraintsBar';\nimport { IconForHorizontal } from '../ActionBar/Icons/IconForHorizontal';\nimport { IconForVertical } from '../ActionBar/Icons/IconForVertical';\n\ninterface MapSnapshot {\n    reframe: boolean;\n    size: string;\n}\n\nexport interface Props {\n    /**\n     * activePolygonIndex is the index of the polygon that is currently available for editing\n     */\n    activePolygonIndex: number;\n    highlightedPolygonIndex?: number;\n    polygonCoordinates: Coordinate[][];\n    boundaryPolygonCoordinates: Coordinate[];\n    selection: Set<number>;\n    editable: boolean;\n    drawable: boolean;\n    initialCenter: LatLngTuple;\n    initialZoom: number;\n    isPolygonClosed: boolean;\n    onClick?: (index: number) => void;\n    onMouseEnter?: (index: number) => void;\n    onMouseLeave?: (index: number) => void;\n    addPoint: (coord: Coordinate) => void;\n    setEdgeRestriction: (restriction: EdgeRestriction) => void;\n    addPointToEdge: (coordinate: Coordinate, index: number) => void;\n    deselectAllPoints: () => void;\n    removePointFromSelection: (index: number) => void;\n    addPointsToSelection: (indices: number[]) => void;\n    selectPoints: (indices: number[]) => void;\n    moveSelectedPoints: (newPosition: Coordinate) => void;\n    deletePolygonPoints: () => void;\n    selectAllPoints: () => void;\n    setPolygon: (polygon: Coordinate[]) => void;\n    onUndo: () => void;\n    onRedo: () => void;\n}\n\ntype MapType = ReturnType<typeof useMap>;\n\nexport interface State {\n    isMovedPointInBoundary: boolean;\n    isShiftPressed: boolean;\n    isMoveActive: boolean;\n    rectangleSelection: {\n        startPosition: Coordinate;\n        endPosition: Coordinate;\n        startTime: number;\n    } | null;\n    selectedEdge:number | null;\n    edgeRelationships: string[], \n    previousMouseMovePosition?: Coordinate;\n    edgeRestrictions: EdgeRestriction;\n    isPenToolActive: boolean;\n    isDrawToolActive: boolean;\n    newPointPosition: Coordinate | null;\n    showExportPolygonModal: boolean;\n    showImportPolygonModal: boolean;\n}\n\nexport type EdgeRestriction = 'horizontal' | 'vertical' | 'none' | null;\n\n\nexport class BaseMap extends React.Component<Props, State> {\n    private map: MapType | null = null;\n\n    state: State = {\n        isMovedPointInBoundary: true,\n        isShiftPressed: false,\n        isMoveActive: false,\n        rectangleSelection: null,\n        previousMouseMovePosition: undefined,\n        selectedEdge: null,\n        edgeRestrictions: null,\n        edgeRelationships: [], \n        isPenToolActive: false,\n        isDrawToolActive: false,\n        newPointPosition: null,\n        showExportPolygonModal: false,\n        showImportPolygonModal: false,\n    };\n\n    static getDerivedStateFromProps(props: Props, state: State): State {\n        return {\n            ...state,\n            isPenToolActive: props.polygonCoordinates.length === 0 ? true : state.isPenToolActive,\n            isDrawToolActive: props.polygonCoordinates.length === 0 ? false : state.isDrawToolActive,\n        };\n    }\n\n    componentDidMount() {\n        this.reframe();\n        this.toggleVectorMode();\n\n        const container = this.map?.getContainer();\n\n        if (container) {\n            container.addEventListener('keydown', this.handleKeyDown, false);\n            container.addEventListener('keyup', this.handleKeyUp);\n        }\n    }\n\n    componentWillUnmount() {\n        const container = this.map?.getContainer();\n\n        if (container) {\n            container.removeEventListener('keydown', this.handleKeyDown, false);\n            container.removeEventListener('keyup', this.handleKeyUp);\n        }\n    }\n\n    getSnapshotBeforeUpdate(prevProps: Props, prevState: State): MapSnapshot {\n        const reframe =\n            // Reframe when the polygon loads for the first time\n            (prevProps.polygonCoordinates[prevProps.activePolygonIndex].length === 0 &&\n                this.props.polygonCoordinates[this.props.activePolygonIndex].length > 1) ||\n            // Reframe when the boundary polygon loads for the first time\n            prevProps.boundaryPolygonCoordinates !== this.props.boundaryPolygonCoordinates;\n\n        const size = this.getSize(this.map);\n\n        return { reframe, size };\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, { reframe, size }: MapSnapshot): void {\n        if (reframe) {\n            this.reframe();\n        }\n\n        if (this.map && this.getSize(this.map) !== size) {\n            this.map.invalidateSize();\n        }\n    }\n\n    setMap = (map: MapType) => {\n        if (map) {\n            this.map = map;\n\n            this.reframe();\n            this.toggleVectorMode();\n\n            const container = map?.getContainer();\n\n            if (container) {\n                container?.addEventListener('keydown', this.handleKeyDown, false);\n                container?.addEventListener('keyup', this.handleKeyUp);\n            }\n        }\n    };\n\n    reframe = () => {\n        const { polygonCoordinates, boundaryPolygonCoordinates, initialCenter, initialZoom } = this.props;\n\n        if (polygonCoordinates[this.props.activePolygonIndex].length > 1) {\n            this.reframeOnPolygon(polygonCoordinates);\n        } else if (boundaryPolygonCoordinates.length > 0 && boundaryPolygonCoordinates !== MAP.WORLD_COORDINATES) {\n            this.reframeOnPolygon(boundaryPolygonCoordinates);\n        } else if (this.map) {\n            this.map.setView(initialCenter, initialZoom);\n        }\n    };\n\n    reframeOnPolygon = (polygonCoordinates: Coordinate[] | Coordinate[][]) => {\n        if (this.map && polygonCoordinates.length > 0) {\n            const bounds = createLeafletLatLngBoundsFromCoordinates(flatten(polygonCoordinates));\n\n            this.map.fitBounds(bounds);\n        }\n    };\n\n    toggleVectorMode = () => {\n        if (!this.props.editable) {\n            return;\n        }\n        this.setState({\n            isPenToolActive: !this.state.isPenToolActive,\n            isDrawToolActive: false, // Ensure the \"draw\" tool is deactivated when switching to the \"pen\" tool\n            newPointPosition: null,\n        });\n    };\n\n    toggleDrawMode = () => {\n        if (!this.props.drawable) {\n            return;\n        }\n        this.setState({\n            isDrawToolActive: !this.state.isDrawToolActive,\n            isPenToolActive: false, // Ensure the \"pen\" tool is deactivated when switching to the \"draw\" tool\n            newPointPosition: null,\n        });\n    };\n\n    getSize = (map: MapType | null): string => {\n        const container = map?.getContainer();\n        return container ? `${container.clientHeight}x${container.clientWidth}` : '';\n    };\n\n    handleOnFocusClicked = () => {\n        const activePolygon = this.props.polygonCoordinates[this.props.activePolygonIndex];\n        if (activePolygon) {\n            this.reframeOnPolygon(activePolygon);\n        } else {\n            this.reframe();\n        }\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n    //                          Export / Import methods                      //\n    ///////////////////////////////////////////////////////////////////////////\n\n    handleExportPolygon = (serialized: string) => {\n        navigator.clipboard.writeText(serialized);\n    };\n\n    handleExportPolygonActionClicked = () => {\n        this.setState({ showExportPolygonModal: true });\n    };\n\n    handleExportPolygonModalClosed = () => {\n        this.setState({ showExportPolygonModal: false });\n    };\n\n    handleImportPolygon = (coordinates: Coordinate[]) => {\n        this.props.setPolygon(coordinates);\n        this.reframeOnPolygon(coordinates);\n    };\n\n    handleImportPolygonActionClicked = () => {\n        this.setState({ showImportPolygonModal: true });\n    };\n\n    handleImportPolygonModalClosed = () => {\n        this.setState({ showImportPolygonModal: false });\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n    //                          Map Events methods                           //\n    ///////////////////////////////////////////////////////////////////////////\n\n    handleMapClick = (event: LeafletMouseEvent) => {\n        const coordinate = createCoordinateFromLeafletLatLng(event.latlng);\n        if (\n            this.state.isPenToolActive &&\n            !this.props.isPolygonClosed &&\n            isCoordinateInPolygon(coordinate, this.props.boundaryPolygonCoordinates)\n        ) {\n            this.props.addPoint(coordinate);\n        } else if (!this.state.isShiftPressed) {\n            this.props.deselectAllPoints();\n        }\n    };\n\n    handleMouseDownOnMap = (event: LeafletMouseEvent) => {\n        const coordinate = createCoordinateFromLeafletLatLng(event.latlng);\n\n        if (this.state.isShiftPressed) {\n            this.setState({\n                rectangleSelection: {\n                    startPosition: coordinate,\n                    endPosition: coordinate,\n                    startTime: new Date().getTime(),\n                },\n            });\n        }\n    };\n\n    handleMouseUpOnMap = () => {\n        if (this.state.rectangleSelection) {\n            this.setState({\n                rectangleSelection: null,\n            });\n        }\n    };\n\n    handleMouseMoveOnMap = (event: LeafletMouseEvent) => {\n        const mouseCoordinate = createCoordinateFromLeafletLatLng(event.latlng);\n        if (this.state.rectangleSelection && new Date().getTime() - this.state.rectangleSelection?.startTime >= 100) {\n            const start = this.state.rectangleSelection.startPosition;\n            if (start) {\n                const bounds: LatLngBounds = latLngBounds(createLeafletLatLngFromCoordinate(start), event.latlng);\n\n                const activePolygon: Coordinate[] | undefined =\n                    this.props.polygonCoordinates[this.props.activePolygonIndex];\n                if (activePolygon) {\n                    const pointsInsideBounds: number[] = [];\n                    activePolygon.forEach((point, index) => {\n                        if (bounds.contains(createLeafletLatLngFromCoordinate(point))) {\n                            pointsInsideBounds.push(index);\n                        }\n                    });\n                    this.props.selectPoints(pointsInsideBounds);\n                }\n            }\n            this.setState({\n                rectangleSelection: {\n                    ...this.state.rectangleSelection,\n                    endPosition: mouseCoordinate,\n                },\n            });\n        } else {\n            const newPointPosition =\n                this.state.isPenToolActive &&\n                !this.props.isPolygonClosed &&\n                isCoordinateInPolygon(mouseCoordinate, this.props.boundaryPolygonCoordinates)\n                    ? mouseCoordinate\n                    : null;\n\n            this.setState({ newPointPosition });\n        }\n    };\n\n    handleMouseOutOfMap = () =>\n        this.setState({\n            newPointPosition: null,\n            rectangleSelection: null,\n        });\n\n    ///////////////////////////////////////////////////////////////////////////\n    //                           Vertex methods                              //\n    ///////////////////////////////////////////////////////////////////////////\n\n    onPolygonVertexClick = (index: number) => {\n        if (\n            index === 0 &&\n            this.props.polygonCoordinates[this.props.activePolygonIndex].length > 2 &&\n            !this.props.isPolygonClosed\n        ) {\n            // Close polygon when user clicks the first point\n            this.props.addPoint({ ...this.props.polygonCoordinates[this.props.activePolygonIndex][0] });\n        } else if (this.state.isShiftPressed) {\n            if (this.props.selection.has(index)) {\n                this.props.removePointFromSelection(index);\n            } else {\n                this.props.addPointsToSelection([index]);\n            }\n        } else {\n            this.props.selectPoints([index]);\n        }\n    };\n\n    startVertexMove = (latLng: LatLng) => {\n        if (!this.state.isMoveActive) {\n            this.setState({\n                isMoveActive: true,\n                previousMouseMovePosition: createCoordinateFromLeafletLatLng(latLng),\n            });\n        }\n    };\n\n    onPolygonVertexDragStart = (latLng: LatLng, index: number) => {\n        if (!this.props.selection.has(index)) {\n            if (this.state.isShiftPressed) {\n                this.props.addPointsToSelection([index]);\n            } else {\n                this.props.selectPoints([index]);\n            }\n        }\n        this.startVertexMove(latLng);\n    };\n\n    updateVertexPosition = (latLng: LatLng) => {\n        if (this.state.isMoveActive && this.state.previousMouseMovePosition) {\n            const coordinate: Coordinate = createCoordinateFromLeafletLatLng(latLng);\n            const moveVector = subtractCoordinates(coordinate, this.state.previousMouseMovePosition);\n\n            const nextCoordinates = Array.from(this.props.selection)\n                .map((i) => this.props.polygonCoordinates[this.props.activePolygonIndex][i])\n                .map((coord) => addCoordinates(coord, moveVector));\n\n            const inBoundary = nextCoordinates.every((nextCoordinate) =>\n                isCoordinateInPolygon(nextCoordinate, this.props.boundaryPolygonCoordinates)\n            );\n\n            if (inBoundary) {\n                this.props.moveSelectedPoints(moveVector);\n                this.setState({ previousMouseMovePosition: coordinate, isMovedPointInBoundary: true });\n            } else {\n                this.setState({ isMovedPointInBoundary: false });\n            }\n        }\n\n        \n    };\n\n    endVertexMove = () => {\n        if (this.state.isMoveActive) {\n            this.setState({\n                isMoveActive: false,\n                previousMouseMovePosition: undefined,\n                isMovedPointInBoundary: true,\n            });\n        }\n    };\n\n    handleEdgeClick = (coordinate: Coordinate, index: number) => {\n        if (this.state.selectedEdge === index) {\n            // If the same edge is clicked, add a vertex in the middle of the edge.\n            this.handleAddVertexInMiddleOfEdge();\n        } else {\n            // Otherwise, just set the clicked edge as the selected edge.\n            this.setState({ selectedEdge: index });\n        }\n    };\n\n    \n    \n\n    handleAddVertexInMiddleOfEdge = () => {\n        if (this.state.selectedEdge === null) {\n            console.error(\"No edge selected to add a vertex.\");\n            return;\n        }\n    \n        const activePolygon = this.props.polygonCoordinates[this.props.activePolygonIndex];\n        const startPoint = activePolygon[this.state.selectedEdge];\n        const endPoint = activePolygon[(this.state.selectedEdge + 1) % activePolygon.length];\n        // const midpoint = getMidPoint(startPoint, endPoint);\n    \n        // this.props.addPointToEdge(midpoint, this.state.selectedEdge);\n        // this.setState({\n        //     selectedEdge: null\n        // });\n\n        let midpoint;\n\n        // if (this.state.edgeRestrictions === 'horizontal') {\n        //     midpoint = {\n        //         latitude: (startPoint.latitude + endPoint.latitude) / 2,\n        //         longitude: startPoint.longitude  // Keeps the longitude unchanged to ensure a horizontal edge.\n        //     };\n        // } else if (this.state.edgeRestrictions === 'vertical') {\n        //     midpoint = {\n        //         latitude: startPoint.latitude,  // Keeps the latitude unchanged to ensure a vertical edge.\n        //         longitude: (startPoint.longitude + endPoint.longitude) / 2\n        //     };\n        // } else {\n        //     midpoint = getMidPoint(startPoint, endPoint);  // Assuming getMidPoint() returns a Coordinate object with latitude and longitude.\n        // }\n\n\n        if (this.state.edgeRelationships[this.state.selectedEdge] === 'horizontal') {\n            midpoint = {\n                latitude: (startPoint.latitude + endPoint.latitude) / 2,\n                longitude: startPoint.longitude, // Keeps the longitude unchanged to ensure a horizontal edge.\n            };\n        } else if (this.state.edgeRelationships[this.state.selectedEdge] === 'vertical') {\n            midpoint = {\n                latitude: startPoint.latitude, // Keeps the latitude unchanged to ensure a vertical edge.\n                longitude: (startPoint.longitude + endPoint.longitude) / 2,\n            };\n        } else {\n            midpoint = getMidPoint(startPoint, endPoint); // Calculate the midpoint using your existing logic.\n        }\n    \n        this.props.addPointToEdge(midpoint, this.state.selectedEdge);\n\n        this.setState({\n            selectedEdge: null\n        });\n    };\n\n    setEdgeRelationship = (relationshipType: string) => {\n        if (this.state.selectedEdge !== null) {\n            const updatedEdgeRelationships = [...this.state.edgeRelationships];\n            updatedEdgeRelationships[this.state.selectedEdge] = relationshipType;\n            this.setState({ edgeRelationships: updatedEdgeRelationships });\n        }\n    };\n\n    handleSetHorizontal = () => {\n        this.setState({ edgeRestrictions: 'horizontal' }, () => {\n            // Call the function to set the edge restriction in the parent component\n            this.props.setEdgeRestriction('horizontal');\n            this.setEdgeRelationship('horizontal');\n            \n        });\n        this.setState({ edgeRelationships: ['horizontal'] });\n        // Call the function to set the edge restriction in the parent component\n        this.props.setEdgeRestriction('horizontal');\n    }\n    \n    handleSetVertical = () => {\n        this.setState({ edgeRestrictions: 'vertical' }, () => {\n            // Call the function to set the edge restriction in the parent component\n            this.props.setEdgeRestriction('vertical');\n            this.setEdgeRelationship('vertical');\n        });\n        this.setState({ edgeRelationships: ['vertical'] });\n    // Call the function to set the edge restriction in the parent component\n        this.props.setEdgeRestriction('vertical');\n    }\n\n    \n    ///////////////////////////////////////////////////////////////////////////\n    //                      Keyboard handling methods                        //\n    ///////////////////////////////////////////////////////////////////////////\n\n    handleKeyDown = (e: KeyboardEvent) => {\n        e.preventDefault();\n        switch (e.key) {\n            case 'Escape':\n                this.props.deselectAllPoints();\n                break;\n            case 'Backspace':\n                this.props.deletePolygonPoints();\n                break;\n            case 'Shift':\n                this.setState({ isShiftPressed: true });\n                break;\n            case 'p':\n                this.toggleVectorMode();\n                break;\n            case 'd':\n                if (this.props.editable) {\n                    this.props.deselectAllPoints();\n                }\n                break;\n            case 'a':\n                if (this.props.editable) {\n                    this.props.selectAllPoints();\n                }\n                break;\n            case 'f':\n                this.reframe();\n                break;\n            case 'z':\n                if (e.metaKey && e.shiftKey) {\n                    this.props.onRedo();\n                } else if (e.metaKey) {\n                    this.props.onUndo();\n                }\n                break;\n        }\n    };\n\n    handleKeyUp = (e: KeyboardEvent) => {\n        switch (e.key) {\n            case 'Shift':\n                this.setState({ isShiftPressed: false });\n                break;\n        }\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n    //                           Render methods                              //\n    ///////////////////////////////////////////////////////////////////////////\n\n    renderPolygonVertex = (coordinate: Coordinate, index: number) => {\n        return (\n            <PolygonVertex\n                coordinate={coordinate}\n                isSelected={this.props.selection.has(index)}\n                key={index}\n                index={index}\n                onClick={this.onPolygonVertexClick}\n                onDragStart={this.onPolygonVertexDragStart}\n                onDrag={this.updateVertexPosition}\n                onDragEnd={this.endVertexMove}\n            />\n        );\n    };\n\n    renderActivePolygonPoints = () => {\n        return this.props.polygonCoordinates[this.props.activePolygonIndex].map(this.renderPolygonVertex);\n    };\n\n    renderVertexEdge = (coordinate: Coordinate, index: number) => (\n        <EdgeVertex \n            key={index} \n                index={index} \n                coordinate={coordinate} \n                onClick={this.props.addPointToEdge} \n                edgeRestriction={this.state.edgeRestrictions}\n            />\n    );\n    // the olde version with not fincvtionalitu to work with the adding the vertexe to the middle of the\n    // renderPolygonEdges = () => {\n    //     return getPolygonEdges(this.props.polygonCoordinates[this.props.activePolygonIndex]).map(this.renderVertexEdge);\n    // };\n\n    // the new wersion of the renderVertexEdge\n    renderPolygonEdges = () => {\n        return getPolygonEdges(this.props.polygonCoordinates[this.props.activePolygonIndex]).map((coordinate, index) => (\n            <EdgeVertex\n                key={index}\n                index={index}\n                coordinate={coordinate}\n                onClick={this.handleEdgeClick}\n                edgeRestriction={this.state.edgeRestrictions} \n            >\n                {this.state.selectedEdge === index && (\n                    <div>\n                        Relationship: {this.state.edgeRelationships[index]}\n                        {/* Render icons here based on the relationship type */}\n                        {this.state.edgeRelationships[index] === 'horizontal' && <IconForHorizontal />}\n                        {this.state.edgeRelationships[index] === 'vertical' && <IconForVertical />}\n                    </div>\n                )}\n            </EdgeVertex>\n        ));\n    };\n    \n    \n\n\n    renderInactivePolygons = () => {\n        const activePolygonIsClosed = isPolygonClosed(this.props.polygonCoordinates[this.props.activePolygonIndex]);\n\n        return this.props.polygonCoordinates.map((coordinates, index) => {\n            const eventHandler = {\n                onClick: () => this.props.onClick && this.props.onClick(index),\n                onMouseEnter: () => this.props.onMouseEnter && this.props.onMouseEnter(index),\n                onMouseLeave: () => this.props.onMouseLeave && this.props.onMouseLeave(index),\n            };\n\n            return index === this.props.activePolygonIndex ? null : (\n                <Polygon\n                    key={`${index}-${coordinates.reduce((acc, cur) => acc + cur.latitude + cur.longitude, 0)}`}\n                    coordinates={coordinates}\n                    isActive={false}\n                    isHighlighted={index === this.props.highlightedPolygonIndex}\n                    {...(activePolygonIsClosed ? eventHandler : {})}\n                />\n            );\n        });\n    };\n\n    renderActivePolygon = () => {\n        const coordinates = this.props.polygonCoordinates[this.props.activePolygonIndex];\n        const index = this.props.activePolygonIndex;\n        return (\n            <Polygon\n                coordinates={coordinates}\n                isActive\n                isHighlighted={false}\n                onClick={() => this.props.onClick && this.props.onClick(index)}\n                onMouseEnter={() => this.props.onMouseEnter && this.props.onMouseEnter(index)}\n                onMouseLeave={() => this.props.onMouseLeave && this.props.onMouseLeave(index)}\n            />\n        );\n    };\n\n    renderPolyline = () => {\n        const { newPointPosition } = this.state;\n        const polygon = this.props.polygonCoordinates[this.props.activePolygonIndex].map(\n            createLeafletLatLngFromCoordinate\n        );\n\n        if (polygon.length === 0) {\n            return null;\n        }\n\n        const newPath = [polygon[polygon.length - 1]];\n        if (newPointPosition) {\n            newPath.push(createLeafletLatLngFromCoordinate(newPointPosition));\n        }\n\n        return (\n            <>\n                <Polyline positions={polygon} color={MAP.POLYGON_ACTIVE_COLOR} interactive={false} />\n                <Polyline positions={newPath} color={MAP.POLYGON_ACTIVE_COLOR} dashArray=\"2 12\" interactive={false} />\n            </>\n        );\n    };\n\n    renderSelectionRectangle = () => {\n        if (this.state.rectangleSelection) {\n            const bounds: LatLngBounds = latLngBounds(\n                createLeafletLatLngFromCoordinate(this.state.rectangleSelection.startPosition),\n                createLeafletLatLngFromCoordinate(this.state.rectangleSelection.endPosition)\n            );\n\n            return (\n                <Rectangle\n                    color={MAP.RECTANGLE_SELECTION_COLOR}\n                    fillColor={MAP.RECTANGLE_SELECTION_COLOR}\n                    bounds={bounds}\n                />\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const { editable,  drawable, selection, initialZoom, initialCenter } = this.props;\n        const { newPointPosition, isPenToolActive, isDrawToolActive } = this.state;\n\n        return (\n            <Container>\n                <Map\n                    fadeAnimation\n                    trackResize\n                    zoomControl={false}\n                    ref={this.setMap}\n                    center={initialCenter}\n                    zoom={initialZoom}\n                    zoomDelta={2}\n                    zoomSnap={1.5}\n                    boxZoom={false}\n                    drawCursor={!!newPointPosition}\n                >\n                    <BoundaryPolygon\n                        coordinates={this.props.boundaryPolygonCoordinates}\n                        hasError={!this.state.isMovedPointInBoundary}\n                    />\n                    {this.props.isPolygonClosed ? this.renderActivePolygon() : this.renderPolyline()}\n                    {this.renderInactivePolygons()}\n\n                    {editable && (\n                        <Pane name=\"Polygon points\">\n                            {this.renderActivePolygonPoints()}\n                            {this.props.isPolygonClosed && isPenToolActive && this.renderPolygonEdges()}\n                        </Pane>\n                    )}\n\n                    {this.state.rectangleSelection && this.renderSelectionRectangle()}\n\n                    {/* <TileLayer /> */}\n                    <MapInner\n                        onClick={this.handleMapClick}\n                        onMouseOut={this.handleMouseOutOfMap}\n                        onMouseMove={this.handleMouseMoveOnMap}\n                        onMouseDown={this.handleMouseDownOnMap}\n                        onMouseUp={this.handleMouseUpOnMap}\n                    />\n                </Map>\n                <ActionBar\n                    editable={editable}\n                    drawable={drawable}\n                    isVectorModeEnabled={isPenToolActive}\n                    isDrawModeEnabled={isDrawToolActive}\n                    onDelete={this.props.deletePolygonPoints}\n                    onFocus={this.handleOnFocusClicked}\n                    onAddVertex={this.handleAddVertexInMiddleOfEdge}\n                    onEnableDrawMode={this.toggleDrawMode}\n                    onEnableVectorMode={this.toggleVectorMode}\n                    deleteInactive={selection.size === 0}\n                    onExport={this.handleExportPolygonActionClicked}\n                    onImport={this.handleImportPolygonActionClicked}\n                />\n                 <EdgeConstraintsBar \n                    onSetHorizontal={this.handleSetHorizontal} \n                    onSetVertical={this.handleSetVertical} \n                />\n\n                {this.state.showExportPolygonModal && (\n                    <Modal onClose={this.handleExportPolygonModalClosed}>\n                        <ExportPolygonForm\n                            polygon={this.props.polygonCoordinates[this.props.activePolygonIndex]}\n                            onSubmit={this.handleExportPolygon}\n                        />\n                    </Modal>\n                )}\n\n                {this.state.showImportPolygonModal && (\n                    <Modal onClose={this.handleImportPolygonModalClosed}>\n                        <ImportPolygonForm onSubmit={this.handleImportPolygon} />\n                    </Modal>\n                )}\n            </Container>\n        );\n    }\n}\n\nexport default memo(BaseMap);\n","import { LeafletMouseEvent } from 'leaflet';\nimport { useMapEvents } from 'react-leaflet';\n\ntype Props = {\n    onClick: (event: LeafletMouseEvent) => void;\n    onMouseDown: (event: LeafletMouseEvent) => void;\n    onMouseUp: (event: LeafletMouseEvent) => void;\n    onMouseMove: (event: LeafletMouseEvent) => void;\n    onMouseOut: (event: LeafletMouseEvent) => void;\n};\n\nconst MapInner = ({ onClick, onMouseMove, onMouseOut }: Props) => {\n    useMapEvents({\n        click: onClick,\n        mousedown: onMouseOut,\n        mouseup: onMouseOut,\n        mousemove: onMouseMove,\n        mouseout: onMouseOut,\n    });\n\n    return null;\n};\n\nexport default MapInner;\n","import React, { FunctionComponent } from 'react';\nimport { Polygon as LeafletPolygon } from 'react-leaflet';\n\nimport { Coordinate } from 'types';\nimport { createLeafletLatLngFromCoordinate } from '../helpers';\nimport { MAP } from '../constants';\n\n// refers to https://leafletjs.com/reference-1.6.0.html#path-dasharray and\n// https://developer.mozilla.org/de/docs/Web/SVG/Attribute/stroke-dasharray\n// 4 describes the dash size, 12 the gap size\nconst DASH_STROKE_SIZE = '1 4';\n\ninterface Props {\n    coordinates: Coordinate[];\n    isActive: boolean;\n    isHighlighted: boolean;\n    onClick?: () => void;\n    onMouseEnter?: () => void;\n    onMouseLeave?: () => void;\n}\n\nexport const Polygon: FunctionComponent<Props> = ({\n    isActive,\n    isHighlighted,\n    coordinates,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n}) => (\n    <LeafletPolygon\n        positions={coordinates.map(createLeafletLatLngFromCoordinate)}\n        dashArray={isActive ? '' : DASH_STROKE_SIZE}\n        fillColor={isActive || isHighlighted ? MAP.POLYGON_ACTIVE_COLOR : MAP.POLYGON_INACTIVE_COLOR}\n        weight={MAP.BORDER_WIDTH}\n        color={isActive ? MAP.POLYGON_ACTIVE_COLOR : MAP.POLYGON_INACTIVE_COLOR}\n        data-testid=\"polygon\"\n        eventHandlers={{\n            click: onClick,\n            mouseover: onMouseEnter,\n            mouseout: onMouseLeave,\n        }}\n    />\n);\n","import React from 'react';\n\nimport { Coordinate } from 'types';\nimport { createLeafletLatLngTupleFromCoordinate } from '../helpers';\n\nimport { MAP } from '../constants';\nimport Map, { EdgeRestriction } from './Map';\nimport { usePolygonEditor } from './usePolygonEditor';\n\nexport type Props<T extends Coordinate[] | Coordinate[][]> = {\n    boundary?: Coordinate[];\n    initialCenter?: Coordinate;\n    initialZoom?: number;\n    editable?: boolean;\n    drawable?: boolean;\n    onChange?: (polygon: T, isValid: boolean) => void;\n    polygon: T;\n    activeIndex?: number;\n    highlightedIndex?: number;\n    setEdgeRestriction?: (restriction: EdgeRestriction) => void;\n    onClick?: (index: number) => void;\n    onMouseEnter?: (index: number) => void;\n    onMouseLeave?: (index: number) => void;\n};\n\nexport function PolygonDraw<T extends Coordinate[] | Coordinate[][]>({\n    polygon,\n    activeIndex = 0,\n    highlightedIndex,\n    boundary,\n    initialCenter,\n    initialZoom,\n    editable = true,\n    drawable = true,\n    onChange,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n}: Props<T>): React.ReactElement {\n    const {\n        polygons,\n        selection,\n        addPoint,\n        addPointToEdge,\n        setPolygon,\n        setEdgeRestriction,\n        deselectAllPoints,\n        removePointFromSelection,\n        addPointsToSelection,\n        selectPoints,\n        moveSelectedPoints,\n        deletePolygonPoints,\n        selectAllPoints,\n        isPolygonClosed,\n        undo,\n        redo,\n    } = usePolygonEditor(onChange, polygon, activeIndex);\n\n    return (\n        <Map\n            selection={selection}\n            editable={editable}\n            drawable={drawable}\n            initialCenter={initialCenter ? createLeafletLatLngTupleFromCoordinate(initialCenter) : MAP.DEFAULT_CENTER}\n            initialZoom={initialZoom || MAP.DEFAULT_ZOOM}\n            boundaryPolygonCoordinates={boundary || MAP.WORLD_COORDINATES}\n            activePolygonIndex={activeIndex}\n            highlightedPolygonIndex={highlightedIndex}\n            polygonCoordinates={polygons}\n            setPolygon={setPolygon}\n            addPoint={addPoint}\n            setEdgeRestriction={setEdgeRestriction} \n            addPointToEdge={addPointToEdge}\n            deselectAllPoints={deselectAllPoints}\n            removePointFromSelection={removePointFromSelection}\n            addPointsToSelection={addPointsToSelection}\n            selectPoints={selectPoints}\n            moveSelectedPoints={moveSelectedPoints}\n            deletePolygonPoints={deletePolygonPoints}\n            selectAllPoints={selectAllPoints}\n            isPolygonClosed={isPolygonClosed}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onUndo={undo}\n            onRedo={redo}\n        />\n    );\n}\n","import 'leaflet-path-drag';\nimport React from 'react';\nimport { CircleMarker, LatLng } from 'leaflet';\nimport { CircleMarker as ReactLeafletCircleMarker } from 'react-leaflet';\n\nimport { Coordinate } from 'types';\nimport { createLeafletLatLngFromCoordinate } from '../helpers';\nimport { MAP } from '../constants';\n\ntype DragEvent = { target: { getLatLng: () => LatLng } };\n\nexport interface Props {\n    coordinate: Coordinate;\n    isSelected: boolean;\n    index: number;\n    onClick: (index: number) => void;\n    onDragStart: (latlng: LatLng, index: number) => void;\n    onDrag: (latlng: LatLng) => void;\n    onDragEnd: () => void;\n}\n\nexport interface State {\n    isHovered: boolean;\n    isDragged: boolean;\n    latLng: LatLng;\n}\n\nexport class PolygonVertex extends React.Component<Props, State> {\n    private circleMarkerElement: CircleMarker;\n    state = {\n        isHovered: false,\n        isDragged: false,\n        latLng: new LatLng(0, 0),\n    };\n\n    static getDerivedStateFromProps = (props: Props, state: State) => {\n        return state.isDragged ? state : { ...state, latLng: createLeafletLatLngFromCoordinate(props.coordinate) };\n    };\n\n    componentDidMount() {\n        if (this.circleMarkerElement) {\n            this.circleMarkerElement.on('dragstart', this.handleDragStart);\n            this.circleMarkerElement.on('drag', this.handleDrag);\n            this.circleMarkerElement.on('dragend', this.handleDragEnd);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.circleMarkerElement) {\n            this.circleMarkerElement.off('dragstart', this.handleDragStart);\n            this.circleMarkerElement.off('drag', this.handleDrag);\n            this.circleMarkerElement.off('dragend', this.handleDragEnd);\n        }\n    }\n\n    // tslint:disable-next-line\n    setCircleMarkerRef = (ref: any) => {\n        if (ref) {\n            this.circleMarkerElement = ref;\n        }\n    };\n\n    handleClick = () => this.props.onClick(this.props.index);\n    handleMouseOver = () => this.setState({ isHovered: true });\n    handleMouseOut = () => this.setState({ isHovered: false });\n\n    handleDragStart = (event: DragEvent) => {\n        this.props.onDragStart(event.target.getLatLng(), this.props.index);\n        this.setState({ isDragged: true });\n    };\n\n    handleDrag = (event: DragEvent) => {\n        if (this.state.isDragged) {\n            this.props.onDrag(event.target.getLatLng());\n        }\n    };\n\n    handleDragEnd = () => {\n        this.props.onDragEnd();\n        this.setState({ isDragged: false });\n    };\n\n    render() {\n        const { isSelected } = this.props;\n        const { isHovered, latLng } = this.state;\n        const selectedOrHovered = isSelected || isHovered;\n        const hoveredAndNotSelected = isHovered && !isSelected;\n\n        return (\n            <ReactLeafletCircleMarker\n                aria-label=\"Polygon\"\n                ref={this.setCircleMarkerRef}\n                fillColor={MAP.VERTEX_FILL_COLOR}\n                fillOpacity={1}\n                color={MAP.POLYGON_ACTIVE_COLOR}\n                opacity={hoveredAndNotSelected ? 0.6 : 1}\n                weight={selectedOrHovered ? 4 : 1}\n                radius={selectedOrHovered ? 6 : 4}\n                center={latLng}\n                eventHandlers={{\n                    click: this.handleClick,\n                    mouseover: this.handleMouseOver,\n                    mouseout: this.handleMouseOut,\n                }}\n                bubblingMouseEvents={false}\n                // @ts-ignore\n                draggable\n            />\n        );\n    }\n}\n","import { createAction } from '../actionUtils';\nimport { ActionsUnion, Coordinate } from '../types';\nimport { EdgeRestriction } from './Map';\n\n// Selection actions\nexport const SELECT_POINTS = 'POLYGON_DRAW/SELECT_POINTS';\nexport const ADD_POINT_TO_SELECTION = 'POLYGON_DRAW/ADD_POINT_TO_SELECTION';\nexport const REMOVE_POINT_FROM_SELECTION = 'POLYGON_DRAW/REMOVE_POINT_FROM_SELECTION';\nexport const SELECT_ALL_POINTS = 'POLYGON_DRAW/SELECT_ALL_POINTS';\nexport const DESELECT_ALL_POINTS = 'POLYGON_DRAW/DESELECT_ALL_POINTS';\n\n// Delete action\nexport const DELETE_POLYGON_POINTS = 'POLYGON_DRAW/DELETE_POLYGON_POINTS';\n\n// Move action\nexport const MOVE_SELECTED_POINTS = 'POLYGON_DRAW/MOVE_SELECTED_POINTS';\n\n// Add point actions\nexport const ADD_POINT = 'POLYGON_DRAW/ADD_POINT';\nexport const ADD_POINT_TO_EDGE = 'POLYGON_DRAW/ADD_POINT_TO_EDGE';\n\n// Change polygon actions\nexport const CHANGE_POLYGON = 'POLYGON_DRAW/CHANGE_POLYGON';\nexport const SET_POLYGON = 'POLYGON_DRAW/SET_POLYGON';\nexport const SET_EDGE_RESTRICTION = 'POLYGON_DRAW/SET_EDGE_RESTRICTION';\n\nexport const actions = {\n    // Selections action creators\n    selectPoints: (indices: number[]) => createAction(SELECT_POINTS, indices),\n    addPointsToSelection: (indices: number[]) => createAction(ADD_POINT_TO_SELECTION, indices),\n    removePointFromSelection: (index: number) => createAction(REMOVE_POINT_FROM_SELECTION, index),\n    selectAllPoints: () => createAction(SELECT_ALL_POINTS),\n    deselectAllPoints: () => createAction(DESELECT_ALL_POINTS),\n\n    // Add the actio creator for the addRestrictions\n    setEdgeRestriction: (restriction: EdgeRestriction) =>\n        createAction(SET_EDGE_RESTRICTION, restriction),\n\n    // Move action creator\n    moveSelectedPoints: (movement: Coordinate) => createAction(MOVE_SELECTED_POINTS, movement),\n\n    // Add point action creator\n    addPoint: (coordinate: Coordinate) => createAction(ADD_POINT, coordinate),\n    addPointToEdge: (coordinate: Coordinate, index: number) => createAction(ADD_POINT_TO_EDGE, { coordinate, index }),\n\n    // Delete action creator\n    deletePolygonPoints: () => createAction(DELETE_POLYGON_POINTS),\n\n    // Change Polygon\n    changePolygon: (polygon: Coordinate[][]) => createAction(CHANGE_POLYGON, polygon),\n    setPolygon: (polygon: Coordinate[]) => createAction(SET_POLYGON, polygon),\n};\n\nexport type Actions = ActionsUnion<typeof actions>;\n","import undoable, { excludeAction } from 'redux-undo';\n\nimport {\n    Actions,\n    SELECT_POINTS,\n    ADD_POINT_TO_SELECTION,\n    REMOVE_POINT_FROM_SELECTION,\n    DESELECT_ALL_POINTS,\n    SELECT_ALL_POINTS,\n    MOVE_SELECTED_POINTS,\n    DELETE_POLYGON_POINTS,\n    ADD_POINT,\n    ADD_POINT_TO_EDGE,\n    CHANGE_POLYGON,\n    SET_POLYGON,\n    SET_EDGE_RESTRICTION,\n} from './actions';\nimport { Coordinate } from 'types';\n\nimport { movePolygonCoordinates, removeSelectedPoints } from '../helpers';\nimport { EdgeRestriction } from './Map';\n\nexport interface PolygonEditState {\n    activeIndex: number;\n    polygons: Coordinate[][];\n    selection: Set<number>;\n    edgeRestriction: EdgeRestriction,\n}\n\n\n\nexport const polygonEditReducer = (state: PolygonEditState, action: Actions): PolygonEditState => {\n    switch (action.type) {\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                            CHANGE POLYGON CASES and ADDING RESTRICTIONS                             ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case CHANGE_POLYGON: {\n            return {\n                ...state,\n                polygons: [...action.payload],\n            };\n        }\n        case SET_POLYGON: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    action.payload,\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set(),\n            };\n        }\n        case SET_EDGE_RESTRICTION: {\n            return {\n                ...state,\n                edgeRestriction: action.payload, \n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                            MOVE COORDINATES CASES                           ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case MOVE_SELECTED_POINTS: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    movePolygonCoordinates(state.polygons[state.activeIndex], state.selection, action.payload),\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                              SELECTION CASES                                ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case SELECT_POINTS: {\n            return {\n                ...state,\n                selection: new Set(action.payload),\n            };\n        }\n        case ADD_POINT_TO_SELECTION: {\n            return {\n                ...state,\n                selection: new Set([...state.selection.values(), ...action.payload]),\n            };\n        }\n        case REMOVE_POINT_FROM_SELECTION: {\n            const selection = new Set(state.selection);\n            selection.delete(action.payload);\n            return {\n                ...state,\n                selection,\n            };\n        }\n        case SELECT_ALL_POINTS: {\n            return {\n                ...state,\n                selection: new Set(state.polygons[state.activeIndex].map((_, i) => i)),\n            };\n        }\n        case DESELECT_ALL_POINTS: {\n            return {\n                ...state,\n                selection: new Set(),\n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                              DELETE POINTS CASE                             ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case DELETE_POLYGON_POINTS: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    removeSelectedPoints(state.polygons[state.activeIndex], state.selection),\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set(),\n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                              ADD POINT CASE                                 ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case ADD_POINT: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    [...state.polygons[state.activeIndex], action.payload],\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set([state.polygons.length]),\n            };\n        }\n        case ADD_POINT_TO_EDGE: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    [\n                        ...state.polygons[state.activeIndex].slice(0, action.payload.index + 1),\n                        action.payload.coordinate,\n                        ...state.polygons[state.activeIndex].slice(action.payload.index + 1),\n                    ],\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set([action.payload.index]),\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport const EDIT_HISTORY_LIMIT = 20;\n\nexport const undoablePolygonEditReducer = undoable(polygonEditReducer, {\n    groupBy: (action, state, history) => {\n        if (action.type === MOVE_SELECTED_POINTS) {\n            return `${action.type}-${[...state.selection].sort().join('-')}`;\n        }\n        return null;\n    },\n    filter: excludeAction([\n        SELECT_POINTS,\n        ADD_POINT_TO_SELECTION,\n        REMOVE_POINT_FROM_SELECTION,\n        SELECT_ALL_POINTS,\n        DESELECT_ALL_POINTS,\n        CHANGE_POLYGON,\n    ]),\n    // see https://github.com/omnidan/redux-undo/issues/6#issuecomment-142089793\n    limit: EDIT_HISTORY_LIMIT + 1,\n    debug: false,\n    syncFilter: true,\n});\n","import { useMemo, useState } from 'react';\nimport { Coordinate } from 'types';\nimport isEqual from 'lodash.isequal';\n\nimport { Actions, actions } from './actions';\nimport { ensurePolygonList, isPolygonClosed, isPolygonList } from '../helpers';\nimport { PolygonEditState, undoablePolygonEditReducer } from './reducer';\nimport { isValidPolygon } from './validators';\nimport { ActionCreators, StateWithHistory } from 'redux-undo';\nimport { EdgeRestriction } from './Map';\n\nexport const usePolygonEditor = (\n    onChange: (polygon: Coordinate[] | Coordinate[][], isValid: boolean) => void = () => {},\n    polygons: Coordinate[] | Coordinate[][],\n    activeIndex: number\n) => {\n    const polygonList = ensurePolygonList(polygons);\n\n    const [selection, setSelection] = useState<Set<number>>(new Set());\n\n    const [edgeRestriction, setEdgeRestriction] = useState<EdgeRestriction | null>(null);\n\n    const [editHistory, setEditHistory] = useState<Omit<StateWithHistory<PolygonEditState>, 'present'>>({\n        past: [],\n        future: [],\n    });\n\n    const state: StateWithHistory<PolygonEditState> = {\n        present: {\n            polygons: polygonList,\n            activeIndex: activeIndex,\n            selection: selection,\n            edgeRestriction: edgeRestriction,\n        },\n        ...editHistory,\n    };\n\n    const dispatch = (action: Actions) => {\n        const {\n            present: { polygons: newPolygons, selection: newSelection },\n            ...rest\n        } = undoablePolygonEditReducer(state, action);\n        setEditHistory(rest);\n        if (!isEqual(selection, newSelection)) {\n            setSelection(newSelection);\n        }\n        onChange(isPolygonList(polygons) ? newPolygons : newPolygons[0], newPolygons.every(isValidPolygon));\n    };\n\n    const activePolygon = useMemo(\n        () => state.present.polygons[state.present.activeIndex],\n        [state.present.polygons, state.present.activeIndex]\n    );\n    const polygonIsClosed: boolean = useMemo(() => isPolygonClosed(activePolygon), [activePolygon]);\n\n    const setPolygon = (polygon: Coordinate[]) => {\n        dispatch(actions.setPolygon(polygon));\n    };\n\n    const addPoint = (coordinate: Coordinate) => {\n        dispatch(actions.addPoint(coordinate));\n    };\n\n    const addPointToEdge = (coordinate: Coordinate, index: number) => {\n        dispatch(actions.addPointToEdge(coordinate, index));\n    };\n\n    const deselectAllPoints = () => {\n        dispatch(actions.deselectAllPoints());\n    };\n\n    const removePointFromSelection = (index: number) => {\n        dispatch(actions.removePointFromSelection(index));\n    };\n\n    const addPointsToSelection = (indices: number[]) => {\n        dispatch(actions.addPointsToSelection(indices));\n    };\n\n    const selectPoints = (indices: number[]) => {\n        dispatch(actions.selectPoints(indices));\n    };\n\n    const moveSelectedPoints = (movement: Coordinate) => {\n        dispatch(actions.moveSelectedPoints(movement));\n    };\n\n    const deletePolygonPoints = () => {\n        dispatch(actions.deletePolygonPoints());\n    };\n\n    const selectAllPoints = () => {\n        dispatch(actions.selectAllPoints());\n    };\n\n    const undo = () => {\n        dispatch(ActionCreators.undo());\n    };\n\n    const redo = () => {\n        dispatch(ActionCreators.redo());\n    };\n\n    return {\n        selection: state.present.selection,\n        polygons: state.present.polygons,\n        isPolygonClosed: polygonIsClosed,\n        edgeRestriction,\n        addPoint,\n        addPointToEdge,\n        deselectAllPoints,\n        removePointFromSelection,\n        addPointsToSelection,\n        selectPoints,\n        moveSelectedPoints,\n        deletePolygonPoints,\n        selectAllPoints,\n        setPolygon,\n        setEdgeRestriction,\n        undo,\n        redo,\n    };\n};\n","import { Coordinate } from 'types';\nimport { isPolygonClosed } from '../helpers';\n\nexport const isValidPolygon = (coordinates: Coordinate[]): boolean =>\n    !!coordinates && coordinates.length > 3 && isPolygonClosed(coordinates);\n","import { Action, ActionWithPayload } from './types';\n\nexport function createAction<T extends string>(type: T): Action<T>;\nexport function createAction<T extends string, P>(type: T, payload: P): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n    return payload === undefined ? { type } : { type, payload };\n}\n","export const ACTION_BLUE_900 = '#096bdb';\n\nexport const AUTHENTIC_BLUE_1100 = '#000f1f';\n\nexport const AUTHENTIC_BLUE_900 = '#001e3e';\n\nexport const AUTHENTIC_BLUE_550 = '#637689';\n\nexport const AUTHENTIC_BLUE_350 = '#9CA7B4';\n\nexport const AUTHENTIC_BLUE_200 = '#c6cdd4';\n\nexport const AUTHENTIC_BLUE_50 = '#f1f7fd';\n\nexport const FREEDOM_RED_900 = '#ff0a2b';\n\nexport const NEGATIVE_ORANGE_50 = '#fff6f1';\n\nexport const NEGATIVE_ORANGE_900 = '#ff5e05';\n\nexport const POSITIVE_GREEN_50 = '#f1faf5';\n\nexport const POSITIVE_GREEN_900 = '#069d4f';\n\nexport const WHITE = '#ffffff';\n\n","import styled, { css } from 'styled-components';\n\nimport { AUTHENTIC_BLUE_50, AUTHENTIC_BLUE_200, AUTHENTIC_BLUE_900, AUTHENTIC_BLUE_1100, WHITE } from '../colors';\n\nexport const Button = styled.button<{ secondary?: boolean }>`\n    border: 1px solid transparent;\n    border-radius: 4px;\n    cursor: pointer;\n    height: 48px;\n    font-size: 16px;\n    min-width: 100px;\n    padding: 0 16px;\n    text-align: center;\n    transition: background ease 216ms, border-color ease 216ms;\n\n    ${({ secondary }) =>\n        secondary\n            ? css`\n                  background: ${WHITE};\n                  border-color: ${AUTHENTIC_BLUE_200};\n                  color: ${AUTHENTIC_BLUE_900};\n\n                  &:hover {\n                      background: ${AUTHENTIC_BLUE_50};\n                  }\n\n                  &:disabled {\n                      color: ${AUTHENTIC_BLUE_200};\n                      background: ${WHITE};\n                      border-color: ${AUTHENTIC_BLUE_200};\n                  }\n              `\n            : css`\n                  background: ${AUTHENTIC_BLUE_900};\n                  border-color: ${AUTHENTIC_BLUE_900};\n                  color: ${WHITE};\n\n                  &:hover {\n                      background: ${AUTHENTIC_BLUE_1100};\n                      border-color: ${AUTHENTIC_BLUE_1100};\n                  }\n\n                  &:disabled {\n                      color: ${WHITE};\n                      background: ${AUTHENTIC_BLUE_200};\n                      border-color: ${AUTHENTIC_BLUE_200};\n                  }\n              `}\n`;\n","import styled from 'styled-components';\n\nexport const ButtonGroup = styled.div`\n    display: flex;\n\n    & > button:not(:last-child) {\n        margin-right: 8px;\n    }\n`;\n","import React from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../colors';\n\ninterface Props {\n    className?: string;\n    color?: string;\n}\n\nexport const CheckCircleSolidIcon: React.FC<Props> = ({ color = AUTHENTIC_BLUE_900, ...props }) => {\n    return (\n        <svg color={color} {...props} width={24} height={24} viewBox=\"0 0 24 24\">\n            <path\n                d=\"M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zm3.898 6.293l-4.912 4.912-2.283-2.258-1.406 1.422 3.696 3.657 6.32-6.319-1.415-1.414z\"\n                fill=\"currentColor\"\n                fillRule=\"nonzero\"\n            />\n        </svg>\n    );\n};\n","import React from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../colors';\n\ninterface Props {\n    className?: string;\n}\n\nexport const ChevronDownIcon: React.FC<Props> = (props) => {\n    return (\n        <svg color={AUTHENTIC_BLUE_900} width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n            <path d=\"M12 13.726l7-6.175v2.676l-7 6.222-7-6.222V7.55z\" fill=\"currentColor\" fillRule=\"nonzero\" />\n        </svg>\n    );\n};\n","import React from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../colors';\n\ninterface Props {\n    className?: string;\n    color?: string;\n}\n\nexport const CloseCircleSolidIcon: React.FC<Props> = ({ color = AUTHENTIC_BLUE_900, ...props }) => {\n    return (\n        <svg color={color} {...props} width={24} height={24} viewBox=\"0 0 24 24\">\n            <path\n                d=\"M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zm2.364 6l-2.475 2.474L9.414 8 8 9.414l2.474 2.475L8 14.364l1.414 1.414 2.475-2.475 2.475 2.475 1.414-1.414-2.475-2.475 2.475-2.475L14.364 8z\"\n                fill=\"currentColor\"\n                fillRule=\"nonzero\"\n            />\n        </svg>\n    );\n};\n","import React from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../colors';\n\ninterface Props {\n    onClick: () => void;\n}\n\nexport const CloseIcon: React.FC<Props> = (props) => {\n    return (\n        <svg color={AUTHENTIC_BLUE_900} width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n            <path\n                d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n                fill=\"currentColor\"\n                fillRule=\"nonzero\"\n            />\n        </svg>\n    );\n};\n","import styled from 'styled-components';\n\nimport { AUTHENTIC_BLUE_900 } from '../colors';\n\nexport const Headline = styled.h2`\n    color: ${AUTHENTIC_BLUE_900};\n    font-size: 32px;\n    margin-bottom: 32px;\n`;\n","import React from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../colors';\n\ninterface Props {\n    className?: string;\n    color?: string;\n}\n\nexport const InfoCircleSolidIcon: React.FC<Props> = ({ color = AUTHENTIC_BLUE_900, ...props }) => {\n    return (\n        <svg color={color} {...props} width={24} height={24} viewBox=\"0 0 24 24\">\n            <path\n                d=\"M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2zm1 8.4h-2v6h2v-6zm-1-3.6a1.2 1.2 0 100 2.4 1.2 1.2 0 000-2.4z\"\n                fill=\"currentColor\"\n                fillRule=\"nonzero\"\n            />\n        </svg>\n    );\n};\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\n\nimport { AUTHENTIC_BLUE_1100 } from '../colors';\nimport { CloseIcon } from './CloseIcon';\n\nconst Dimming = styled.div`\n    background-color: ${AUTHENTIC_BLUE_1100};\n    height: 100%;\n    left: 0;\n    opacity: 0.6;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 1000;\n`;\n\nconst TopRightCloseIcon = styled(CloseIcon)`\n    position: absolute;\n    top: 8px;\n    right: 8px;\n    cursor: pointer;\n    z-index: 1050;\n`;\n\nconst Card = styled.div`\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0 0 6px 2px rgba(0, 0, 0, 0.12);\n    box-sizing: border-box;\n    left: 50%;\n    max-height: calc(100% - 16px);\n    overflow: auto;\n    padding: 40px;\n    position: fixed;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 630px;\n    z-index: 1050;\n`;\n\ntype DismissFunc = () => void;\n\n// tslint:disable-next-line: no-empty\nconst DismissContext = React.createContext<DismissFunc>(() => {});\n\nexport const useDismiss = () => useContext(DismissContext);\n\ninterface Props {\n    onClose: () => void;\n    children: React.ReactNode;\n}\n\nexport const Modal: React.FC<Props> = ({ children, onClose }) => {\n    const dismiss = () => {\n        // hook (not a react hook) used for animations\n        onClose();\n    };\n\n    return (\n        <>\n            <Dimming onClick={dismiss} />\n            <Card>\n                <TopRightCloseIcon onClick={dismiss} />\n                <DismissContext.Provider value={dismiss}>{children}</DismissContext.Provider>\n            </Card>\n        </>\n    );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { AUTHENTIC_BLUE_200, AUTHENTIC_BLUE_550, ACTION_BLUE_900 } from '../colors';\nimport { ChevronDownIcon } from './ChevronDownIcon';\n\ninterface Props extends React.SelectHTMLAttributes<HTMLSelectElement> {\n    id: string;\n    label: string;\n}\n\nconst Container = styled.div`\n    box-sizing: border-box;\n    display: inline-block;\n    margin-bottom: 16px;\n    position: relative;\n`;\n\nconst Label = styled.label`\n    background: white;\n    color: ${AUTHENTIC_BLUE_550};\n    font-size: 10px;\n    left: 8px;\n    transform: translateY(-50%);\n    padding: 0 4px;\n    position: absolute;\n`;\n\nconst Input = styled.select`\n    appearance: none;\n    background: white;\n    border: 1px solid ${AUTHENTIC_BLUE_200};\n    border-radius: 4px;\n    box-sizing: border-box;\n    font-size: 16px;\n    height: 48px;\n    margin: 0;\n    padding: 12px;\n    transition: box-shadow 100ms, border 100ms;\n    outline: none;\n    width: 100%;\n\n    &:active,\n    &:focus {\n        border-color: ${ACTION_BLUE_900};\n        box-shadow: inset 0 0 0 1px ${ACTION_BLUE_900};\n    }\n`;\n\nconst SelectIcon = styled(ChevronDownIcon)`\n    pointer-events: none;\n    position: absolute;\n    right: 8px;\n    top: 50%;\n    transform: translateY(-50%);\n`;\n\n// FIXME: label is missing an active state, should be same color as border\nexport const Select: React.FC<Props> = ({ children, id, label, ...props }) => {\n    return (\n        <Container>\n            <Label htmlFor={id}>{label}</Label>\n            <Input id={id} {...props}>\n                {children}\n            </Input>\n            <SelectIcon />\n        </Container>\n    );\n};\n","import styled from 'styled-components';\n\nimport { ACTION_BLUE_900, AUTHENTIC_BLUE_550, AUTHENTIC_BLUE_1100 } from '../colors';\n\ninterface Props {\n    weak?: boolean;\n}\n\nexport const Text = styled.p<Props>`\n    color: ${({ weak }) => (weak ? AUTHENTIC_BLUE_550 : AUTHENTIC_BLUE_1100)};\n    font-size: 14px;\n\n    a,\n    a:visited {\n        color: ${ACTION_BLUE_900};\n        font-weight: bold;\n        text-decoration: none;\n    }\n`;\n","import styled from 'styled-components';\n\nimport { AUTHENTIC_BLUE_200 } from '../colors';\n\nexport const Textarea = styled.textarea`\n    appearance: none;\n    background: white;\n    border: 1px solid ${AUTHENTIC_BLUE_200};\n    border-radius: 4px;\n    box-sizing: border-box;\n    font-size: 16px;\n    min-height: 200px;\n    padding: 12px 12px 0;\n    resize: none;\n    transition: box-shadow 100ms, border 100ms;\n    outline: none;\n    white-space: pre;\n    width: 100%;\n`;\n","// tslint:disable-next-line: no-any\nexport const prettyPrint = (value: any) => JSON.stringify(value, null, 2);\n","import { ACTION_BLUE_900, FREEDOM_RED_900, AUTHENTIC_BLUE_550, WHITE, AUTHENTIC_BLUE_350 } from './common/colors';\nimport { LatLngTuple } from 'leaflet';\n\nexport const LABELS = {\n    DRAW: 'Draw',\n    PEN: 'Pen',\n    ADD_VERTEX: 'Vertex',\n    DELETE: 'Delete',\n    FOCUS: 'Focus',\n    EXPORT: 'Export',\n    IMPORT: 'Import',\n};\n\nexport const LEAFLET = {\n    TILE_SERVER_URL: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',\n};\n\nexport const MAP = {\n    POLYGON_ACTIVE_COLOR: ACTION_BLUE_900,\n    RECTANGLE_SELECTION_COLOR: AUTHENTIC_BLUE_350,\n    POLYGON_INACTIVE_COLOR: AUTHENTIC_BLUE_550,\n    VERTEX_FILL_COLOR: WHITE,\n    BOUNDARY_COLOR: AUTHENTIC_BLUE_550,\n    ERROR_BOUNDARY_COLOR: FREEDOM_RED_900,\n    BORDER_WIDTH: 2,\n\n    DEFAULT_CENTER: [53.397, 10.4] as LatLngTuple,\n    DEFAULT_ZOOM: 12,\n\n    /**\n     * This defines a polygon that encompasses the whole world. It can be used to\n     * make an subtractive effect if you lay over another polygon. See boundary\n     * polygon.\n     */\n    WORLD_LAT_LNG_COORDINATES: [\n        { lat: -85.1054596961173, lng: -180 },\n        { lat: 85.1054596961173, lng: -180 },\n        { lat: 85.1054596961173, lng: 180 },\n        { lat: -85.1054596961173, lng: 180 },\n        { lat: -85.1054596961173, lng: 0 },\n    ],\n\n    WORLD_COORDINATES: [\n        { latitude: -85.1054596961173, longitude: -180 },\n        { latitude: 85.1054596961173, longitude: -180 },\n        { latitude: 85.1054596961173, longitude: 180 },\n        { latitude: -85.1054596961173, longitude: 180 },\n        { latitude: -85.1054596961173, longitude: 0 },\n    ],\n};\n","import React, { FormEventHandler, useState, useMemo, ChangeEventHandler } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\n\nimport { Export } from '../ActionBar/Icons/Export';\nimport { Button } from '../common/components/Button';\nimport { ButtonGroup } from '../common/components/ButtonGroup';\nimport { Headline } from '../common/components/Headline';\nimport { useDismiss } from '../common/components/Modal';\nimport { Select } from '../common/components/Select';\nimport { Textarea } from '../common/components/Textarea';\nimport { Text } from '../common/components/Text';\nimport { AUTHENTIC_BLUE_1100, WHITE } from '../common/colors';\nimport { Coordinate } from '../types';\nimport { format } from './format';\nimport { FormatType } from './format/types';\n\nconst Form = styled.form`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Description = styled(Text).attrs(() => ({ weak: true }))`\n    margin-bottom: 24px;\n`;\n\nconst rippleAnimation = keyframes`\n    0% {\n        opacity: 0.6;\n    }\n    50% {\n        opacity: 0.4;\n    }\n    100% {\n        opacity: 0.6;\n    }\n`;\n\nconst CopyOverlay = styled.div<{ isActive: boolean }>`\n    align-items: center;\n    background-color: ${AUTHENTIC_BLUE_1100};\n    border-radius: 4px;\n    cursor: pointer;\n    display: flex;\n    flex-direction: column;\n    height: 200px;\n    justify-content: center;\n    margin-bottom: calc(24px - 200px);\n    position: relative;\n    opacity: 0;\n    top: -200px;\n    transition: opacity 0.1s linear;\n\n    ${({ isActive }) =>\n        isActive\n            ? css`\n                  animation: ${rippleAnimation} 0.4s ease-out;\n              `\n            : ''}\n\n    &:hover {\n        background-color: ${AUTHENTIC_BLUE_1100};\n        opacity: 0.6;\n    }\n`;\n\nconst CopyOverlayLabel = styled.p`\n    color: ${WHITE};\n    font-size: 16px;\n`;\n\nconst CopyTextarea = styled(Textarea)`\n    height: 200px;\n    z-index: -1;\n`;\n\ninterface Props {\n    polygon: Coordinate[];\n    onSubmit: (value: string) => void;\n}\n\nexport const ExportPolygonForm: React.FC<Props> = ({ polygon, onSubmit }) => {\n    const [copyButtonClicked, setCopyButtonClicked] = useState(false);\n    const [copyOverlayIsActive, setCopyOverlayIsActive] = useState(false);\n    const [copyOverlayClicked, setCopyOverlayClicked] = useState(false);\n    const dismiss = useDismiss();\n\n    const [outputFormat, setOutputFormat] = useState(format.geojson);\n\n    const value = useMemo(() => outputFormat.serialize(polygon), [polygon, outputFormat.serialize]);\n\n    const handleOutputFormatChanged: ChangeEventHandler<HTMLSelectElement> = (e) => {\n        const selectedValue = e.target.value as FormatType;\n        setOutputFormat(format[selectedValue]);\n    };\n\n    const handleCopyOverlayClicked = () => {\n        if (!copyOverlayClicked) {\n            setCopyOverlayIsActive(true);\n            setCopyOverlayClicked(true);\n            setTimeout(() => setCopyOverlayClicked(false), 1000);\n            onSubmit(value);\n        }\n    };\n\n    const handleOnSubmit: FormEventHandler = (e) => {\n        e.preventDefault();\n\n        if (!copyButtonClicked) {\n            setCopyButtonClicked(true);\n            setTimeout(() => setCopyButtonClicked(false), 1000);\n        }\n\n        onSubmit(value);\n    };\n\n    return (\n        <Form onSubmit={handleOnSubmit}>\n            <Headline>Export Polygon</Headline>\n\n            <Select\n                id=\"fn-export-format-select\"\n                label=\"Export format\"\n                value={outputFormat.name}\n                onChange={handleOutputFormatChanged}\n            >\n                {Object.values(format).map((f) => (\n                    <option key={f.name} value={f.name}>\n                        {f.displayName}\n                    </option>\n                ))}\n            </Select>\n\n            {outputFormat.description && <Description dangerouslySetInnerHTML={{ __html: outputFormat.description }} />}\n\n            <CopyTextarea value={value} readOnly />\n            <CopyOverlay\n                isActive={copyOverlayIsActive}\n                onClick={handleCopyOverlayClicked}\n                onAnimationEnd={() => setCopyOverlayIsActive(false)}\n            >\n                <Export iconColor={WHITE} height={48} width={48} />\n                <CopyOverlayLabel>{copyOverlayClicked ? 'Copied!' : 'Copy to clipboard'}</CopyOverlayLabel>\n            </CopyOverlay>\n\n            <ButtonGroup>\n                <Button>{copyButtonClicked ? 'Copied!' : 'Copy code'}</Button>\n                <Button type=\"button\" secondary onClick={dismiss}>\n                    Close\n                </Button>\n            </ButtonGroup>\n        </Form>\n    );\n};\n","import React, { FormEventHandler, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Coordinate } from 'types';\n\nimport { Button } from '../common/components/Button';\nimport { ButtonGroup } from '../common/components/ButtonGroup';\nimport { Headline } from '../common/components/Headline';\nimport { Textarea } from '../common/components/Textarea';\nimport { useDismiss } from '../common/components/Modal';\nimport { ImportPolygonStatus, Status } from './ImportPolygonStatus';\nimport { useDeserialize } from './useDeserialize';\n\nconst Form = styled.form`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst StyledTextarea = styled(Textarea)`\n    margin-bottom: 24px;\n`;\n\ninterface Props {\n    onSubmit?: (coordinates: Coordinate[]) => void;\n}\n\nexport const ImportPolygonForm: React.FC<Props> = ({ onSubmit = () => {} }) => {\n    const dismiss = useDismiss();\n    const [text, setText] = useState('');\n    const [status, setStatus] = useState(Status.EMPTY);\n    const deserialized = useDeserialize(text);\n\n    useEffect(() => {\n        if (text === '') {\n            setStatus(Status.EMPTY);\n            return;\n        }\n\n        if (deserialized.valid) {\n            setStatus(Status.VALID);\n            return;\n        }\n\n        setStatus(Status.INVALID);\n    }, [text]);\n\n    const handleOnSubmit: FormEventHandler = (e) => {\n        e.preventDefault();\n\n        if (deserialized.valid) {\n            onSubmit(deserialized.coordinates);\n            dismiss();\n        }\n    };\n\n    return (\n        <Form onSubmit={handleOnSubmit} name=\"Import Polygon\">\n            <Headline>Import Polygon</Headline>\n            <ImportPolygonStatus status={status} />\n            <StyledTextarea placeholder=\"Insert code here\" value={text} onChange={(e) => setText(e.target.value)} />\n            <ButtonGroup>\n                <Button type=\"submit\" disabled={!deserialized.valid}>\n                    Import\n                </Button>\n                <Button type=\"button\" secondary onClick={dismiss}>\n                    Close\n                </Button>\n            </ButtonGroup>\n        </Form>\n    );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport {\n    AUTHENTIC_BLUE_50,\n    ACTION_BLUE_900,\n    NEGATIVE_ORANGE_50,\n    NEGATIVE_ORANGE_900,\n    POSITIVE_GREEN_50,\n    POSITIVE_GREEN_900,\n} from '../common/colors';\nimport { CheckCircleSolidIcon } from '../common/components/CheckCircleSolidIcon';\nimport { CloseCircleSolidIcon } from '../common/components/CloseCircleSolidIcon';\nimport { InfoCircleSolidIcon } from '../common/components/InfoCircleSolidIcon';\nimport { Text } from '../common/components/Text';\n\nexport const enum Status {\n    EMPTY,\n    VALID,\n    INVALID,\n}\n\nconst Container = styled.div<{ status: Status }>`\n    background-color: ${({ status }) => {\n        switch (status) {\n            case Status.EMPTY:\n                return AUTHENTIC_BLUE_50;\n            case Status.VALID:\n                return POSITIVE_GREEN_50;\n            case Status.INVALID:\n                return NEGATIVE_ORANGE_50;\n        }\n    }};\n    border-radius: 8px;\n    display: flex;\n    margin-bottom: 24px;\n    padding: 8px;\n`;\n\nconst ContentWrapper = styled.div`\n    margin-left: 8px;\n`;\n\nconst Title = styled(Text)`\n    font-weight: bold;\n`;\n\nconst Description = styled(Text)`\n    font-size: 12px;\n`;\n\ninterface Props {\n    status: Status;\n}\n\nexport const ImportPolygonStatus: React.FC<Props> = ({ status }) => {\n    let data: {\n        title: string;\n        description: string;\n        icon: ReactNode;\n    };\n\n    switch (status) {\n        case Status.EMPTY: {\n            data = {\n                title: 'Enter polygon coordinates',\n                description: 'Only GeoJSON is supported at the moment.',\n                icon: <InfoCircleSolidIcon color={ACTION_BLUE_900} />,\n            };\n            break;\n        }\n        case Status.VALID: {\n            data = {\n                title: 'Format detected',\n                description: 'GeoJSON. Valid data.',\n                icon: <CheckCircleSolidIcon color={POSITIVE_GREEN_900} />,\n            };\n            break;\n        }\n        case Status.INVALID: {\n            data = {\n                title: 'Invalid format',\n                description: 'Please make sure that the entered polygon is valid GeoJSON.',\n                icon: <CloseCircleSolidIcon color={NEGATIVE_ORANGE_900} />,\n            };\n            break;\n        }\n    }\n\n    return (\n        <Container status={status}>\n            {data.icon}\n            <ContentWrapper>\n                <Title>{data.title}</Title>\n                <Description>{data.description}</Description>\n            </ContentWrapper>\n        </Container>\n    );\n};\n","import type { GeoJSON, Polygon } from 'geojson';\nimport rewind from '@mapbox/geojson-rewind';\nimport geojsonhint, { Hint } from '@mapbox/geojsonhint';\n\nimport { Coordinate } from 'types';\n\nimport { prettyPrint } from '../../common/helpers/prettyPrint';\nimport { Format, FormatType } from './types';\n\nconst serialize = (coordinates: Coordinate[]): string => {\n    const geoJSON: GeoJSON = {\n        type: 'FeatureCollection',\n        features: [\n            {\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                    type: 'Polygon',\n                    coordinates: [coordinates.map(({ longitude, latitude }) => [longitude, latitude])],\n                },\n            },\n        ],\n    };\n\n    return prettyPrint(geoJSON);\n};\n\nconst ALLOWED_GEOJSON_GEOMETRY_TYPES = ['Polygon'];\nconst ALLOWED_GEOJSON_TYPES = ['FeatureCollection', 'Feature', ...ALLOWED_GEOJSON_GEOMETRY_TYPES];\n\nconst getErrors = (value: unknown): Hint[] => {\n    return geojsonhint.hint(value, {\n        precisionWarning: false,\n    });\n};\n\nconst acceptGeoJSON = (value: unknown): value is GeoJSON => {\n    return getErrors(rewind(value as GeoJSON)).length === 0;\n};\n\nconst getCoordinatesFromPolygon = (polygon: Polygon): Coordinate[] => {\n    return polygon.coordinates[0].map(([longitude, latitude]) => ({ longitude, latitude }));\n};\n\nconst deserialize = (raw: string): Coordinate[] => {\n    const parsed = JSON.parse(raw);\n\n    if (!acceptGeoJSON(parsed)) {\n        throw new Error(`Invalid GeoJSON detected:\\n${getErrors(parsed).map((error) => `- ${error.message}\\n`)}`);\n    }\n\n    switch (parsed.type) {\n        case 'Feature': {\n            const geometry = parsed.geometry;\n            if (geometry.type !== 'Polygon') {\n                throw new Error(\n                    `Geometry type ${geometry.type} is not supported, must be one of ${ALLOWED_GEOJSON_GEOMETRY_TYPES}`\n                );\n            }\n            return getCoordinatesFromPolygon(geometry);\n        }\n        case 'FeatureCollection': {\n            const geometry = parsed.features[0].geometry;\n            if (geometry.type !== 'Polygon') {\n                throw new Error(\n                    `Geometry type ${geometry.type} is not supported, must be one of ${ALLOWED_GEOJSON_GEOMETRY_TYPES}`\n                );\n            }\n            return getCoordinatesFromPolygon(geometry);\n        }\n        case 'Polygon': {\n            const polygon = parsed;\n            return getCoordinatesFromPolygon(polygon);\n        }\n        default: {\n            throw new Error(`Type ${parsed.type} is not supported, must be one of ${ALLOWED_GEOJSON_TYPES}`);\n        }\n    }\n};\n\nconst validate = (raw: string): boolean => {\n    try {\n        deserialize(raw);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nexport const geojson: Format = {\n    name: FormatType.GEOJSON,\n    displayName: 'GeoJSON',\n    description: `GeoJSON is a format for encoding a variety of geographic data structures. <a href=\"https://geojson.org/\" target=\"_blank\">More info</a>`,\n    serialize,\n    deserialize,\n    validate,\n};\n","import { geojson } from './geojson';\nimport { jts } from './jts';\nimport { latlng } from './latlng';\nimport { Format, FormatType } from './types';\n\nexport const format: Record<FormatType, Format> = {\n    [FormatType.GEOJSON]: geojson,\n    [FormatType.JTS]: jts,\n    [FormatType.LATLNG]: latlng,\n};\n","import { prettyPrint } from '../../common/helpers/prettyPrint';\nimport { Format, FormatType } from './types';\n\nexport const jts: Format = {\n    name: FormatType.JTS,\n    displayName: 'JTS',\n    serialize: (coordinates) => {\n        return prettyPrint(coordinates.map(({ longitude, latitude }) => [longitude, latitude]));\n    },\n    deserialize: (raw) => {\n        throw new Error('not implemented');\n    },\n    validate: (raw) => {\n        throw new Error('not implemented');\n    },\n};\n","import { prettyPrint } from '../../common/helpers/prettyPrint';\nimport { Format, FormatType } from './types';\n\nexport const latlng: Format = {\n    name: FormatType.LATLNG,\n    displayName: 'LatLng',\n    serialize: (coordinates) => {\n        return prettyPrint(coordinates);\n    },\n    deserialize: (raw) => {\n        throw new Error('not implemented');\n    },\n    validate: (raw) => {\n        throw new Error('not implemented');\n    },\n};\n","import { Coordinate } from 'types';\n\nexport enum FormatType {\n    GEOJSON = 'geojson',\n    LATLNG = 'latlng',\n    JTS = 'jts',\n}\n\nexport interface Format {\n    name: FormatType;\n    displayName: string;\n    description?: string;\n    serialize: (coordinates: Coordinate[]) => string;\n    deserialize: (raw: string) => Coordinate[];\n    validate: (value: string) => boolean;\n}\n","import { useMemo } from 'react';\n\nimport { Coordinate } from 'types';\n\nimport { format } from './format';\n\ntype Result =\n    | {\n          valid: false;\n      }\n    | {\n          valid: true;\n          coordinates: Coordinate[];\n      };\n\nexport const useDeserialize = (raw: string): Result => {\n    return useMemo(() => {\n        // the only format that is currently supported is GeoJSON\n        const detectedFormat = format.geojson;\n\n        return detectedFormat.validate(raw)\n            ? { valid: true, coordinates: detectedFormat.deserialize(raw) }\n            : { valid: false };\n    }, [raw]);\n};\n","import { LatLng, LatLngBounds, LatLngTuple } from 'leaflet';\nimport isEqual from 'lodash.isequal';\n\nimport { Coordinate } from './types';\n\nexport const createLeafletLatLngTupleFromCoordinate = (coordinate: Coordinate): LatLngTuple => [\n    coordinate.latitude,\n    coordinate.longitude,\n];\n\nexport const createLeafletLatLngBoundsFromCoordinates = (coordinates: Coordinate[]) =>\n    new LatLngBounds(coordinates.map(createLeafletLatLngTupleFromCoordinate));\n\nexport const createLeafletLatLngFromCoordinate = (coordinate: Coordinate) =>\n    new LatLng(coordinate.latitude, coordinate.longitude);\n\nexport const createCoordinateFromLeafletLatLng = (latLng: LatLng): Coordinate => ({\n    latitude: latLng.lat,\n    longitude: latLng.lng,\n});\n\nexport const addCoordinates = (coordA: Coordinate, coordB: Coordinate): Coordinate => ({\n    latitude: coordA.latitude + coordB.latitude,\n    longitude: coordA.longitude + coordB.longitude,\n});\n\nexport const subtractCoordinates = (coordA: Coordinate, coordB: Coordinate): Coordinate => ({\n    latitude: coordA.latitude - coordB.latitude,\n    longitude: coordA.longitude - coordB.longitude,\n});\n\nexport const isPolygonClosed = (coordinates: Coordinate[]): boolean =>\n    coordinates && coordinates.length > 2 && isEqual(coordinates[0], coordinates[coordinates.length - 1]);\n\nexport const isClosingPointsSelected = (coordinates: Coordinate[], selection: Set<number>): boolean =>\n    isPolygonClosed(coordinates) && (selection.has(coordinates.length - 1) || selection.has(0));\n\n// https://wrf.ecse.rpi.edu//Research/Short_Notes/pnpoly.html\nexport const isCoordinateInPolygon = (coordinate: Coordinate, polygon: Coordinate[]): boolean => {\n    let inside = false;\n    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        const intersect =\n            polygon[i].longitude > coordinate.longitude !== polygon[j].longitude > coordinate.longitude &&\n            coordinate.latitude <\n                ((polygon[j].latitude - polygon[i].latitude) * (coordinate.longitude - polygon[i].longitude)) /\n                    (polygon[j].longitude - polygon[i].longitude) +\n                    polygon[i].latitude;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n\n    return inside;\n};\n\nexport const movePolygonCoordinates = (\n    polygon: Coordinate[],\n    selectedCoordinates: Set<number>,\n    moveVector: Coordinate\n) => {\n    const selection = new Set([...selectedCoordinates]);\n\n    if (isClosingPointsSelected(polygon, selection)) {\n        selection.add(0);\n        selection.add(polygon.length - 1);\n    }\n\n    return polygon.map((coord, index) => {\n        if (selection.has(index)) {\n            return addCoordinates(coord, moveVector);\n        } else {\n            return coord;\n        }\n    });\n};\n\nexport const removeSelectedPoints = (polygonCoordinates: Coordinate[], selectedPoints: Set<number>) => {\n    const newPolygonCoordinates = polygonCoordinates.filter((polygonCoordinate, index) => !selectedPoints.has(index));\n    const isOldPathClosed =\n        polygonCoordinates.length > 1 &&\n        isEqual(polygonCoordinates[0], polygonCoordinates[polygonCoordinates.length - 1]);\n    const isNewPathClosed =\n        newPolygonCoordinates.length > 1 &&\n        isEqual(newPolygonCoordinates[0], newPolygonCoordinates[newPolygonCoordinates.length - 1]);\n\n    // Open closed path if it has 3 points or less\n    if (newPolygonCoordinates.length < 4 && isNewPathClosed) {\n        newPolygonCoordinates.shift();\n    }\n\n    // Remove closing points if either of them was removed\n    if (isOldPathClosed) {\n        if (selectedPoints.has(0) && !selectedPoints.has(polygonCoordinates.length - 1)) {\n            newPolygonCoordinates.pop();\n        }\n        if (!selectedPoints.has(0) && selectedPoints.has(polygonCoordinates.length - 1)) {\n            newPolygonCoordinates.shift();\n        }\n    }\n\n    // Close previously closed path if it has 3 points or more\n    if (isOldPathClosed && !isNewPathClosed && newPolygonCoordinates.length > 2) {\n        newPolygonCoordinates.push({ ...newPolygonCoordinates[0] });\n    }\n\n    return newPolygonCoordinates;\n};\n\nexport const getCenterCoordinate = (coordA: Coordinate, coordB: Coordinate): Coordinate => ({\n    latitude: (coordA.latitude + coordB.latitude) / 2,\n    longitude: (coordA.longitude + coordB.longitude) / 2,\n});\n\n// Returns the center coordinates of the polygon edges\nexport const getPolygonEdges = (polygon: Coordinate[]) =>\n    polygon.reduce<Coordinate[]>((edges, coordinate, index) => {\n        if (index === 0 || isEqual(polygon[index], polygon[index - 1])) {\n            return edges;\n        }\n        edges.push(getCenterCoordinate(polygon[index], polygon[index - 1]));\n        return edges;\n    }, []);\n\n// Always returns a list of polygons from a single or multiple polygons\nexport const ensurePolygonList = (polygons: Coordinate[] | Coordinate[][]): Coordinate[][] => {\n    if (polygons.length === 0) {\n        return [[]];\n    }\n\n    if (isPolygonList(polygons)) {\n        // we have to cast here because ts can not infer the type from Array.isArray\n        return polygons;\n    }\n\n    // we have to cast here because ts can not infer the type from Array.isArray\n    return [polygons];\n};\n\nexport const isPolygonList = (polygons: Coordinate[] | Coordinate[][]): polygons is Coordinate[][] => {\n    return Array.isArray(polygons[0]);\n};\n\n\n/**\n     * function to calculate the midpoint of the edge\n     * @param coord1\n     * @param coord2\n*/\nexport const getMidPoint = (coord1: Coordinate, coord2: Coordinate) => ({\n    latitude: (coord1.latitude + coord2.latitude) / 2,\n    longitude: (coord1.longitude + coord2.longitude) / 2\n\n});\n","import styled from 'styled-components';\n\nimport { MapContainer as LeafletMap } from 'react-leaflet';\n\nexport const Map = styled(LeafletMap)`\n    height: 100%;\n    width: 100%;\n    z-index: 0;\n\n    cursor: ${({ drawCursor }: { drawCursor: boolean }) => (drawCursor ? 'crosshair !important' : 'auto')};\n`;\n\nexport const Container = styled.div`\n    position: relative;\n    height: 100%;\n    width: 100%;\n`;\n","import { Dispatch, ReactElement, SetStateAction, useState } from 'react';\n\ninterface Props<T extends {}> {\n    children: (state: T, setState: Dispatch<SetStateAction<T>>) => ReactElement;\n    initialState: T;\n}\n\nexport const StateContainer = <T extends {}>({ children, initialState }: Props<T>) => {\n    const [state, setState] = useState(initialState);\n    return children(state, setState);\n};\n","import { Coordinate } from '../src/types';\n\nexport const POLYGON: Coordinate[] = [\n    {\n      \"latitude\": 53.56545917520555,\n      \"longitude\": 10.0412155687809\n    },\n    {\n      \"latitude\": 53.56586697476003,\n      \"longitude\": 10.018899589776995\n    },\n    {\n      \"latitude\": 53.58380626282291,\n      \"longitude\": 10.005166679620745\n    },\n    {\n      \"latitude\": 53.56668256207333,\n      \"longitude\": 9.993150383234026\n    },\n    {\n      \"latitude\": 53.56590195824798,\n      \"longitude\": 9.967552318581115\n    },\n    {\n      \"latitude\": 53.557835385275894,\n      \"longitude\": 9.988566724100538\n    },\n    {\n      \"latitude\": 53.54443307367735,\n      \"longitude\": 9.980509919391151\n    },\n    {\n      \"latitude\": 53.55091198890709,\n      \"longitude\": 10.005494702540156\n    },\n    {\n      \"latitude\": 53.54585180495961,\n      \"longitude\": 10.033938899014835\n    },\n    {\n      \"latitude\": 53.557798955455596,\n      \"longitude\": 10.02115349375403\n    },\n    {\n      \"latitude\": 53.56545917520555,\n      \"longitude\": 10.0412155687809\n    }\n  ];\n\nexport const POLYGON_ONE = [\n    { longitude: 9.99927520751953, latitude: 53.61511726495334 },\n    { longitude: 9.959793090820312, latitude: 53.59046705636403 },\n    { longitude: 10.050430297851562, latitude: 53.58659505554131 },\n    { longitude: 9.99927520751953, latitude: 53.61511726495334 },\n];\n\nexport const POLYGON_TWO = [\n    { longitude: 9.936790466308594, latitude: 53.575588484564 },\n    { longitude: 9.894561767578125, latitude: 53.54397962810946 },\n    { longitude: 10.000648498535156, latitude: 53.550507262191466 },\n    { longitude: 9.936790466308594, latitude: 53.575588484564 },\n];\n\nexport const POLYGON_THREE = [\n    { longitude: 10.037727355957031, latitude: 53.58292651697834 },\n    { longitude: 9.976272583007812, latitude: 53.576811578422124 },\n    { longitude: 10.084762573242188, latitude: 53.53806309007896 },\n    { longitude: 10.037727355957031, latitude: 53.58292651697834 },\n];\n\nexport const POLYGON_FOUR = [\n    { longitude: 11.037727355957031, latitude: 53.58292651697834 },\n    { longitude: 10.976272583007812, latitude: 53.576811578422124 },\n    { longitude: 11.084762573242188, latitude: 53.53806309007896 },\n    { longitude: 11.037727355957031, latitude: 53.58292651697834 },\n];\n\n\nexport const BOUNDARY: Coordinate[] = [\n    {\n        latitude: 53.443987343914415,\n        longitude: 10.406995532226574,\n    },\n    {\n        latitude: 53.48568199044699,\n        longitude: 10.291639086914074,\n    },\n    {\n        latitude: 53.52325380763081,\n        longitude: 10.316358325195324,\n    },\n    {\n        latitude: 53.57180275272803,\n        longitude: 10.323911425781262,\n    },\n    {\n        latitude: 53.65408611468818,\n        longitude: 10.37815642089845,\n    },\n    {\n        latitude: 53.73661534401494,\n        longitude: 10.354810473632824,\n    },\n    {\n        latitude: 53.76016541209191,\n        longitude: 10.3149850341797,\n    },\n    {\n        latitude: 53.77193549631012,\n        longitude: 10.259366748046887,\n    },\n    {\n        latitude: 53.784513662021666,\n        longitude: 10.207181689453137,\n    },\n    {\n        latitude: 53.79303221318756,\n        longitude: 10.132337329101574,\n    },\n    {\n        latitude: 53.79931860574721,\n        longitude: 10.043845889282238,\n    },\n    {\n        latitude: 53.78512218732761,\n        longitude: 9.92917608947755,\n    },\n    {\n        latitude: 53.70573664949797,\n        longitude: 9.8425729248047,\n    },\n    {\n        latitude: 53.682969417399946,\n        longitude: 9.795194384765637,\n    },\n    {\n        latitude: 53.664461973731676,\n        longitude: 9.784208056640637,\n    },\n    {\n        latitude: 53.662020824914535,\n        longitude: 9.741636035156262,\n    },\n    {\n        latitude: 53.624572167578165,\n        longitude: 9.723783251953137,\n    },\n    {\n        latitude: 53.5791414422048,\n        longitude: 9.714170214843762,\n    },\n    {\n        latitude: 53.4828219018219,\n        longitude: 9.786954638671887,\n    },\n    {\n        latitude: 53.4321255060469,\n        longitude: 9.8645455810547,\n    },\n    {\n        latitude: 53.4268070555346,\n        longitude: 10.008741137695324,\n    },\n    {\n        latitude: 53.4607518789609,\n        longitude: 10.0513131591797,\n    },\n    {\n        latitude: 53.379730238088,\n        longitude: 10.203061816406262,\n    },\n    {\n        latitude: 53.443987343914415,\n        longitude: 10.406995532226574,\n    },\n];\n","/* (ignored) */","/* (ignored) */"],"names":[],"sourceRoot":""}