{"version":3,"file":"PolygonDraw-stories.83d2f770a4077616a186.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AAgBA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA","sources":["webpack://@freenow/react-polygon-editor/./src/PolygonDraw/reducer.ts"],"sourcesContent":["import undoable, { excludeAction } from 'redux-undo';\n\nimport {\n    Actions,\n    SELECT_POINTS,\n    ADD_POINT_TO_SELECTION,\n    REMOVE_POINT_FROM_SELECTION,\n    DESELECT_ALL_POINTS,\n    SELECT_ALL_POINTS,\n    MOVE_SELECTED_POINTS,\n    DELETE_POLYGON_POINTS,\n    ADD_POINT,\n    ADD_POINT_TO_EDGE,\n    CHANGE_POLYGON,\n    SET_POLYGON,\n} from './actions';\nimport { Coordinate } from 'types';\n\nimport { movePolygonCoordinates, removeSelectedPoints } from '../helpers';\nimport { EdgeRestriction } from './Map';\n\nexport interface PolygonEditState {\n    activeIndex: number;\n    polygons: Coordinate[][];\n    selection: Set<number>;\n    edgeRestriction: EdgeRestriction,\n}\n\nconst SET_EDGE_RESTRICTION = 'SET_EDGE_RESTRICTION';\n\nexport const polygonEditReducer = (state: PolygonEditState, action: Actions): PolygonEditState => {\n    switch (action.type) {\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                            CHANGE POLYGON CASES                             ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case CHANGE_POLYGON: {\n            return {\n                ...state,\n                polygons: [...action.payload],\n            };\n        }\n        case SET_POLYGON: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    action.payload,\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set(),\n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                            MOVE COORDINATES CASES                           ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case MOVE_SELECTED_POINTS: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    movePolygonCoordinates(state.polygons[state.activeIndex], state.selection, action.payload),\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                              SELECTION CASES                                ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case SELECT_POINTS: {\n            return {\n                ...state,\n                selection: new Set(action.payload),\n            };\n        }\n        case ADD_POINT_TO_SELECTION: {\n            return {\n                ...state,\n                selection: new Set([...state.selection.values(), ...action.payload]),\n            };\n        }\n        case REMOVE_POINT_FROM_SELECTION: {\n            const selection = new Set(state.selection);\n            selection.delete(action.payload);\n            return {\n                ...state,\n                selection,\n            };\n        }\n        case SELECT_ALL_POINTS: {\n            return {\n                ...state,\n                selection: new Set(state.polygons[state.activeIndex].map((_, i) => i)),\n            };\n        }\n        case DESELECT_ALL_POINTS: {\n            return {\n                ...state,\n                selection: new Set(),\n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                              DELETE POINTS CASE                             ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case DELETE_POLYGON_POINTS: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    removeSelectedPoints(state.polygons[state.activeIndex], state.selection),\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set(),\n            };\n        }\n\n        ///////////////////////////////////////////////////////////////////////////////////\n        ///                              ADD POINT CASE                                 ///\n        ///////////////////////////////////////////////////////////////////////////////////\n        case ADD_POINT: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    [...state.polygons[state.activeIndex], action.payload],\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set([state.polygons.length]),\n            };\n        }\n        case ADD_POINT_TO_EDGE: {\n            return {\n                ...state,\n                polygons: [\n                    ...state.polygons.slice(0, state.activeIndex),\n                    [\n                        ...state.polygons[state.activeIndex].slice(0, action.payload.index + 1),\n                        action.payload.coordinate,\n                        ...state.polygons[state.activeIndex].slice(action.payload.index + 1),\n                    ],\n                    ...state.polygons.slice(state.activeIndex + 1),\n                ],\n                selection: new Set([action.payload.index]),\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport const EDIT_HISTORY_LIMIT = 20;\n\nexport const undoablePolygonEditReducer = undoable(polygonEditReducer, {\n    groupBy: (action, state, history) => {\n        if (action.type === MOVE_SELECTED_POINTS) {\n            return `${action.type}-${[...state.selection].sort().join('-')}`;\n        }\n        return null;\n    },\n    filter: excludeAction([\n        SELECT_POINTS,\n        ADD_POINT_TO_SELECTION,\n        REMOVE_POINT_FROM_SELECTION,\n        SELECT_ALL_POINTS,\n        DESELECT_ALL_POINTS,\n        CHANGE_POLYGON,\n    ]),\n    // see https://github.com/omnidan/redux-undo/issues/6#issuecomment-142089793\n    limit: EDIT_HISTORY_LIMIT + 1,\n    debug: false,\n    syncFilter: true,\n});\n"],"names":[],"sourceRoot":""}