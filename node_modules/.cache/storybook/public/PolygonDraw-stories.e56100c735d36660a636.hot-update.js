"use strict";
self["webpackHotUpdate_freenow_react_polygon_editor"]("PolygonDraw-stories",{

/***/ "./src/PolygonDraw/reducer.ts":
/*!************************************!*\
  !*** ./src/PolygonDraw/reducer.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EDIT_HISTORY_LIMIT: () => (/* binding */ EDIT_HISTORY_LIMIT),
/* harmony export */   polygonEditReducer: () => (/* binding */ polygonEditReducer),
/* harmony export */   undoablePolygonEditReducer: () => (/* binding */ undoablePolygonEditReducer)
/* harmony export */ });
/* harmony import */ var redux_undo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-undo */ "./node_modules/redux-undo/dist/redux-undo.mjs");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions */ "./src/PolygonDraw/actions.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers */ "./src/helpers.ts");



const polygonEditReducer = (state, action) => {
  switch (action.type) {
    ///////////////////////////////////////////////////////////////////////////////////
    ///                            CHANGE POLYGON CASES and ADDING RESTRICTIONS                             ///
    ///////////////////////////////////////////////////////////////////////////////////
    case _actions__WEBPACK_IMPORTED_MODULE_1__.CHANGE_POLYGON:
      {
        return {
          ...state,
          polygons: [...action.payload]
        };
      }
    case _actions__WEBPACK_IMPORTED_MODULE_1__.SET_POLYGON:
      {
        return {
          ...state,
          polygons: [...state.polygons.slice(0, state.activeIndex), action.payload, ...state.polygons.slice(state.activeIndex + 1)],
          selection: new Set()
        };
      }
    case _actions__WEBPACK_IMPORTED_MODULE_1__.SET_EDGE_RESTRICTION:
      {
        return {
          ...state,
          edgeRestriction: action.payload
        };
      }

    ///////////////////////////////////////////////////////////////////////////////////
    ///                            MOVE COORDINATES CASES                           ///
    ///////////////////////////////////////////////////////////////////////////////////
    case _actions__WEBPACK_IMPORTED_MODULE_1__.MOVE_SELECTED_POINTS:
      {
        return {
          ...state,
          polygons: [...state.polygons.slice(0, state.activeIndex), (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.movePolygonCoordinates)(state.polygons[state.activeIndex], state.selection, action.payload), ...state.polygons.slice(state.activeIndex + 1)]
        };
      }

    ///////////////////////////////////////////////////////////////////////////////////
    ///                              SELECTION CASES                                ///
    ///////////////////////////////////////////////////////////////////////////////////
    case _actions__WEBPACK_IMPORTED_MODULE_1__.SELECT_POINTS:
      {
        return {
          ...state,
          selection: new Set(action.payload)
        };
      }
    case _actions__WEBPACK_IMPORTED_MODULE_1__.ADD_POINT_TO_SELECTION:
      {
        return {
          ...state,
          selection: new Set([...state.selection.values(), ...action.payload])
        };
      }
    case _actions__WEBPACK_IMPORTED_MODULE_1__.REMOVE_POINT_FROM_SELECTION:
      {
        const selection = new Set(state.selection);
        selection.delete(action.payload);
        return {
          ...state,
          selection
        };
      }
    case _actions__WEBPACK_IMPORTED_MODULE_1__.SELECT_ALL_POINTS:
      {
        return {
          ...state,
          selection: new Set(state.polygons[state.activeIndex].map((_, i) => i))
        };
      }
    case _actions__WEBPACK_IMPORTED_MODULE_1__.DESELECT_ALL_POINTS:
      {
        return {
          ...state,
          selection: new Set()
        };
      }

    ///////////////////////////////////////////////////////////////////////////////////
    ///                              DELETE POINTS CASE                             ///
    ///////////////////////////////////////////////////////////////////////////////////
    case _actions__WEBPACK_IMPORTED_MODULE_1__.DELETE_POLYGON_POINTS:
      {
        return {
          ...state,
          polygons: [...state.polygons.slice(0, state.activeIndex), (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.removeSelectedPoints)(state.polygons[state.activeIndex], state.selection), ...state.polygons.slice(state.activeIndex + 1)],
          selection: new Set()
        };
      }

    ///////////////////////////////////////////////////////////////////////////////////
    ///                              ADD POINT CASE                                 ///
    ///////////////////////////////////////////////////////////////////////////////////
    case _actions__WEBPACK_IMPORTED_MODULE_1__.ADD_POINT:
      {
        return {
          ...state,
          polygons: [...state.polygons.slice(0, state.activeIndex), [...state.polygons[state.activeIndex], action.payload], ...state.polygons.slice(state.activeIndex + 1)],
          selection: new Set([state.polygons.length])
        };
      }
    case _actions__WEBPACK_IMPORTED_MODULE_1__.ADD_POINT_TO_EDGE:
      {
        return {
          ...state,
          polygons: [...state.polygons.slice(0, state.activeIndex), [...state.polygons[state.activeIndex].slice(0, action.payload.index + 1), action.payload.coordinate, ...state.polygons[state.activeIndex].slice(action.payload.index + 1)], ...state.polygons.slice(state.activeIndex + 1)],
          selection: new Set([action.payload.index])
        };
      }
    default:
      {
        return state;
      }
  }
};
const EDIT_HISTORY_LIMIT = 20;
const undoablePolygonEditReducer = (0,redux_undo__WEBPACK_IMPORTED_MODULE_0__["default"])(polygonEditReducer, {
  groupBy: (action, state, history) => {
    if (action.type === _actions__WEBPACK_IMPORTED_MODULE_1__.MOVE_SELECTED_POINTS) {
      return `${action.type}-${[...state.selection].sort().join('-')}`;
    }
    return null;
  },
  filter: (0,redux_undo__WEBPACK_IMPORTED_MODULE_0__.excludeAction)([_actions__WEBPACK_IMPORTED_MODULE_1__.SELECT_POINTS, _actions__WEBPACK_IMPORTED_MODULE_1__.ADD_POINT_TO_SELECTION, _actions__WEBPACK_IMPORTED_MODULE_1__.REMOVE_POINT_FROM_SELECTION, _actions__WEBPACK_IMPORTED_MODULE_1__.SELECT_ALL_POINTS, _actions__WEBPACK_IMPORTED_MODULE_1__.DESELECT_ALL_POINTS, _actions__WEBPACK_IMPORTED_MODULE_1__.CHANGE_POLYGON]),
  // see https://github.com/omnidan/redux-undo/issues/6#issuecomment-142089793
  limit: EDIT_HISTORY_LIMIT + 1,
  debug: false,
  syncFilter: true
});

/***/ })

});
//# sourceMappingURL=PolygonDraw-stories.e56100c735d36660a636.hot-update.js.map