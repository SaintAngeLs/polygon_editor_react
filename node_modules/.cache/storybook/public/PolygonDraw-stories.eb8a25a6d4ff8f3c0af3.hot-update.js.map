{"version":3,"file":"PolygonDraw-stories.eb8a25a6d4ff8f3c0af3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAlFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAGA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AALA","sources":["webpack://@freenow/react-polygon-editor/./src/ActionBar/ActionBar.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/ActionButton.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/AddVertex.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/DrawMode.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/Frame.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/Import.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/Trashbin.tsx","webpack://@freenow/react-polygon-editor/./src/ActionBar/Icons/VectorMode.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\n\nimport { FREEDOM_RED_900 } from '../common/colors';\n\nimport { ActionButton, ActionButtonIcons } from './ActionButton';\nimport { LABELS } from '../constants';\n\nconst Container = styled.div`\n    position: absolute;\n    right: 0;\n    bottom: 24px;\n    display: flex;\n\n    padding-right: 8px;\n    padding-left: 8px;\n\n    > * {\n        margin-left: 8px;\n    }\n`;\n\nexport interface Props {\n    editable: boolean;\n\n    drawable: boolean;\n\n    onFocus: () => void;\n\n    onEnableDrawMode: (enabled?: boolean) => void;\n    isVectorModeEnabled: boolean;\n\n    onEnableVectorMode: (enabled?: boolean) => void;\n    isDrawModeEnabled: boolean;\n\n    onAddVertex: () => void;\n\n    onDelete: () => void;\n    deleteInactive: boolean;\n\n    onExport: () => void;\n    onImport: () => void;\n}\n\nexport const ActionBar: FunctionComponent<Props> = ({\n    editable,\n    drawable,\n    deleteInactive,\n    isVectorModeEnabled,\n    onEnableVectorMode,\n    onEnableDrawMode,\n    isDrawModeEnabled,\n    onAddVertex,\n    onFocus,\n    onDelete,\n    onExport,\n    onImport,\n}) => (\n    <Container>\n        {editable && (\n            <>\n                <ActionButton\n                     onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n                        e.stopPropagation();\n                        if (!isVectorModeEnabled) {\n                            onEnableVectorMode(true);\n                            onEnableDrawMode(false);\n                        }\n                    }}\n                    icon={ActionButtonIcons.VECTOR_MODE}\n                    inactive={!isVectorModeEnabled}\n                    aria-label={`${isVectorModeEnabled ? 'Disable Editing' : 'Enable Editing'}`}\n                >\n                    {LABELS.PEN}\n                </ActionButton>\n                <ActionButton\n                    onClick={onDelete}\n                    icon={ActionButtonIcons.TRASHCAN}\n                    activeIconColor={FREEDOM_RED_900}\n                    disabled={deleteInactive}\n                    inactive={deleteInactive}\n                    aria-label=\"Delete\"\n                >\n                    {LABELS.DELETE}\n                </ActionButton>\n            </>\n        )}\n        {drawable && (\n            <>\n                <ActionButton\n                    onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n                        e.stopPropagation();\n                        if (!isDrawModeEnabled) {\n                            onEnableDrawMode(true);\n                            onEnableVectorMode(false);\n                        }\n                    }}\n                    icon={ActionButtonIcons.DRAW_MODE}\n                    inactive={!isDrawModeEnabled}\n                    aria-label={`${isDrawModeEnabled ? 'Disable Drawing' : 'Enable Drawing'}`}\n                >\n                    {LABELS.DRAW}\n                </ActionButton>\n                <ActionButton\n                    onClick={onDelete}\n                    icon={ActionButtonIcons.TRASHCAN}\n                    activeIconColor={FREEDOM_RED_900}\n                    disabled={deleteInactive}\n                    inactive={deleteInactive}\n                    aria-label=\"Delete\"\n                >\n                    {LABELS.DELETE}\n                </ActionButton>\n            </>\n        )}\n        <ActionButton onClick={onAddVertex} icon={ActionButtonIcons.ADD_VERTEX}>\n            {LABELS.ADD_VERTEX}\n        </ActionButton>\n        <ActionButton onClick={onImport} icon={ActionButtonIcons.IMPORT}>\n            {LABELS.IMPORT}\n        </ActionButton>\n        <ActionButton onClick={onExport} icon={ActionButtonIcons.EXPORT}>\n            {LABELS.EXPORT}\n        </ActionButton>\n        <ActionButton onClick={onFocus} icon={ActionButtonIcons.FRAME}>\n            {LABELS.FOCUS}\n        </ActionButton>\n    </Container>\n);\n","import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\n\nimport { AUTHENTIC_BLUE_900, AUTHENTIC_BLUE_200, ACTION_BLUE_900, WHITE } from '../common/colors';\n\nimport { Frame } from './Icons/Frame';\nimport { Trashbin } from './Icons/Trashbin';\nimport { VectorMode } from './Icons/VectorMode';\nimport { Export } from './Icons/Export';\nimport { Import } from './Icons/Import';\nimport { DrawMode } from './Icons/DrawMode';\nimport { AddVertex } from './Icons/AddVertex';\n\nexport enum ActionButtonIcons {\n    TRASHCAN = 'TRASHCAN',\n    FRAME = 'FRAME',\n    VECTOR_MODE = 'VECTOR_MODE',\n    ADD_VERTEX = 'ADD_VERTEX',\n    DRAW_MODE = 'DRAW_MODE',\n    EXPORT = 'EXPORT',\n    IMPORT = 'IMPORT',\n}\n\ninterface ContainerProps {\n    disabled?: boolean;\n}\nconst Container = styled('div')<ContainerProps>`\n    position: relative;\n    width: 42px;\n    height: 42px;\n\n    padding-top: 6px;\n    border-radius: 4px;\n\n    text-align: center;\n    font-size: 10px;\n    font-weight: 600;\n    color: ${AUTHENTIC_BLUE_900};\n    background-color: ${WHITE};\n    border: solid ${AUTHENTIC_BLUE_200} 1px;\n\n    box-shadow: inherit;\n    transition: 0.2s;\n\n    user-select: none;\n    cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n\n    &:hover {\n        transform: scale(1.005);\n        box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.16);\n        z-index: 1;\n    }\n`;\n\nconst renderIcon = (icon: ActionButtonIcons, inactive?: boolean, activeIconColor = ACTION_BLUE_900) => {\n    const props = {\n        iconColor: inactive ? AUTHENTIC_BLUE_200 : activeIconColor,\n        width: 16,\n        height: 16,\n    };\n\n    switch (icon) {\n        case ActionButtonIcons.TRASHCAN:\n            return <Trashbin {...props} />;\n        case ActionButtonIcons.FRAME:\n            return <Frame {...props} />;\n        case ActionButtonIcons.VECTOR_MODE:\n            return <VectorMode {...props} />;\n        case ActionButtonIcons.ADD_VERTEX:\n            return <AddVertex {...props} />;\n        case ActionButtonIcons.DRAW_MODE:\n            return <DrawMode {...props} />;\n        case ActionButtonIcons.EXPORT:\n            return <Export {...props} />;\n        case ActionButtonIcons.IMPORT:\n            return <Import {...props} />;\n        default:\n            return null;\n    }\n};\n\nexport interface Props {\n    icon: ActionButtonIcons;\n    onClick: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n\n    inactive?: boolean;\n    disabled?: boolean;\n    activeIconColor?: string;\n    className?: string;\n    children: React.ReactNode;\n}\nexport const ActionButton: FunctionComponent<Props> = ({ icon, children, inactive, activeIconColor, ...props }) => {\n    return (\n        <Container {...props}>\n            <div>{renderIcon(icon, inactive, activeIconColor)}</div>\n            {children}\n        </Container>\n    );\n};\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const AddVertex: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" width={16} height={16}>\n        <path \n        stroke-linecap=\"round\" \n        stroke-linejoin=\"round\" \n        d=\"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const DrawMode: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n        <path fill={iconColor} stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9.53 16.122a3 3 0 00-5.78 1.128 2.25 2.25 0 01-2.4 2.245 4.5 4.5 0 008.4-2.245c0-.399-.078-.78-.22-1.128zm0 0a15.998 15.998 0 003.388-1.62m-5.043-.025a15.994 15.994 0 011.622-3.395m3.42 3.42a15.995 15.995 0 004.764-4.648l3.876-5.814a1.151 1.151 0 00-1.597-1.597L14.146 6.32a15.996 15.996 0 00-4.649 4.763m3.42 3.42a6.776 6.776 0 00-3.42-3.42\" />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const Frame: FunctionComponent<Props> = ({ iconColor, ...props }) => (\n    <svg width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n        <path\n            fill={iconColor}\n            d=\"M0 8V4a4 4 0 0 1 4-4h4v2H4a2 2 0 0 0-2 2v4H0zm0 8h2v4c0 1.1.9 2 2 2h4v2H4a4 4 0 0 1-4-4v-4zm24-8h-2V4a2 2 0 0 0-2-2h-4V0h4a4 4 0 0 1 4 4v4zm0 8v4a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2v-4h2z\"\n            \n            fillRule=\"nonzero\"\n        />\n    </svg>\n);\n","import React, { SVGProps } from 'react';\n\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\n\nexport const Import: React.FC<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n        <path\n            d=\"M19 19v2H5v-2h14zM12 3l6 5.333v2.675l-5-4.444V17h-2V6.564l-5 4.445V8.334L12 3z\"\n            fill={iconColor}\n            fillRule=\"nonzero\"\n        />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const Trashbin: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }) => (\n    <svg width={24} height={24} viewBox=\"4 4 19 19\" {...props}>\n        <path\n            fill={iconColor}\n            d=\"M8.8 19.4c0 .9.6 1.6 1.4 1.6h6c.7 0 1.4-.7 1.4-1.6V10H8.8v9.4zm9.9-12.7h-2.8l-.8-1h-3.9l-.8 1H7.7V9h11V6.7z\"\n        />\n    </svg>\n);\n","import React, { FunctionComponent, SVGProps } from 'react';\n\nimport { AUTHENTIC_BLUE_900 } from '../../common/colors';\n\ninterface Props extends SVGProps<SVGSVGElement> {\n    iconColor?: string;\n}\n\nexport const VectorMode: FunctionComponent<Props> = ({ iconColor = AUTHENTIC_BLUE_900, ...props }: Props) => (\n    <svg width={24} height={24} viewBox=\"0 0 24 24\" {...props}>\n        <path\n            fill={iconColor}\n            d=\"M15 13.2v7.4l-14.3 3 3-14.3H11l3.9 3.9zm-9.4-1.6l-2 9 9-1.9v-7.1h-7zm13.8 3a3.5 3.5 0 0 1-5 0l-4.8-5a3.5 3.5 0 0 1 0-4.8l4-4.1 9.8 9.8-4 4zm-11.5 0a1.2 1.2 0 1 1 1.7 1.6 1.2 1.2 0 0 1-1.7-1.6z\"\n        />\n    </svg>\n);\n"],"names":[],"sourceRoot":""}